<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | .hack/lynnard]]></title>
  <link href="http://lynnard.tk/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://lynnard.tk/"/>
  <updated>2014-12-10T22:29:10+00:00</updated>
  <id>http://lynnard.tk/</id>
  <author>
    <name><![CDATA[Lynnard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Vim-like XMonad -- Prompt, Task Groups, Topical Workspaces, Float styles and more]]></title>
    <link href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/"/>
    <updated>2013-11-05T16:45:00+00:00</updated>
    <id>http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more</id>
    <content type="html"><![CDATA[<p><strong>Update: I&rsquo;ve formally made a package called <em>VIMonad</em> with all the features discussed here (as well as other more interesting ones) <a href="http://vimonad.lynnard.tk">here</a>.</strong></p>

<p>About a year ago, a friend of mine reading Computer Science introduced me to XMonad. At that time the window manager I was using - or rather stuck with - is Aqua from Mac OS X, and I was fanatically resorting to tmux as a temporary replacement for all purposes. This might be one of the most important moments for my working environment, since from that time I was enchanted by the simplicity of a Linux system and switched to Arch Linux + XMonad permanently.</p>

<p>Now one year later I&rsquo;ve had enough experience (I can&rsquo;t say I&rsquo;m a Haskell master though) and it&rsquo;s a good time to review my customizations and share my tips.</p>

<p>As the title indicates, my starting point is with Vim in mind. For me Vim is such an enlightening piece of software that it does not only count as one of the best editors, but also offers a lot of metaphors on improving efficiency, especially for a keyboard-driven workflow.</p>

<h1>What I miss from the start</h1>

<ol>
<li><p><code>Mod-o</code> and <code>Mod-i</code> to navigate through the window history</p>

<p> <a href="#window_history">jump to discussion</a></p></li>
<li><p>better splitter and buffer <em>(window)</em> integration; allow each split window to show multiple buffers <em>(windows)</em></p>

<p> <a href="#splitter">jump to discussion</a></p></li>
<li><p>improved command line control through <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Prompt.html">XMonad.Prompt</a>; especially integrate frequently-used commands into the prompt to make a dynamic system like <a href="http://alfredapp.com">Alfred</a></p>

<p> <a href="#prompt">jump to discussion</a></p></li>
<li><p>topical workspaces with terminals starting inside with custom directories (there are implementations for this in Contrib but I don&rsquo;t think the approach is elegant enough)</p>

<p> <a href="#topical_workspace">jump to discussion</a></p></li>
<li><p>dynamic renaming, reorganization, removement of workspaces; but at the same time each workspace should still be linked to a shortcut i.e. <code>Mod-1</code> to <code>Mod-9</code>, <code>Mod--</code> and <code>Mod-=</code></p>

<p> <a href="#dynamic_workspace">jump to discussion</a></p></li>
<li><p><code>Mod-/</code> to search the windows; <code>Mod-m</code> and <code>Mod-'</code> to mark windows and jump to them</p>

<p> <a href="#window_jumping">jump to discussion</a></p></li>
<li>manage windows in groups according to their different roles/tasks; I call them <em>task groups</em>. More specifically

<ul>
<li><code>Mod-] &lt;specifier&gt;</code> and <code>Mod-[ &lt;specifier&gt;</code> cycles through the particular group</li>
<li><code>Mod-d &lt;specifier&gt;</code> quits all windows in that group</li>
<li><code>Mod-S-]</code> and <code>Mod-S-[</code> switches between groups</li>
<li><code>Mod-S-o &lt;specifier&gt;</code> and <code>Mod-S-i &lt;specifier&gt;</code> steps through the window history for that group</li>
</ul>


<p> Here <code>&lt;specifer&gt;</code> is a single or a sequence of keystrokes to represent a particular task group. As an example I have the following in my <code>xmonad.hs</code></p>

<pre><code> b   --&gt; Vimb
 v   --&gt; Vim
 z   --&gt; zathura
 m   --&gt; mutt
 f   --&gt; finch
 r   --&gt; ranger
 t   --&gt; idle xterms
 S-t --&gt; all other xterms
</code></pre>

<p> Note that as a convenience a special specifier is designed for each action. For example, <code>Mod-] &lt;specifier&gt;</code> and <code>Mod-[ &lt;specifier&gt;</code> have specifiers <code>[</code> and <code>]</code> that will cycle through the <em>current group</em> (the group of the currently focused window); similarly pressing <code>Mod-d d</code> will delete windows in the current group.</p>

<p> <a href="#task_group">jump to discussion</a></p></li>
<li><p>expanding on the concept of task group in the previous point, each group has its particular <em>float styles</em> and pressing <code>Mod-t</code> and <code>Mod-S-t</code> shall cycle forward/backward through these styles. For example, I have defined for my <code>ranger</code> instances such that pressing <code>M-t</code> once will make it float and occupy the lower half of the screen; pressing it again makes it occupy the upper half of the screen; a third time sinks it back into the layout.</p>

<p> <a href="#float_style">jump to discussion</a></p></li>
<li><p>able to toggle a few windows on and off (floating). Think of it as the dock in the Mac OS system; sometimes you need it but sometimes you don&rsquo;t; and the best way to make it readily available without clustering the workspace is to have it hidden in the background and activated via a key. This is essentially <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Util-Scratchpad.html">XMonad.Util.Scratchpad</a> from Contrib; however, the original scratchpad does not provide workspace-specific scratchpads, so all workspaces have to share the same scratchpad. My extension will work around this limitation and allow a different scratchpad in each workspace, toggled with the same key sequence.</p>

<p> <a href="#scratchpad">jump to discussion</a></p></li>
<li><p>a wallpaper system that allows easy previewing and changing of the wallpaper. Press <code>M-x</code> to make all windows half-transparent to show the wallpaper (I call this <em>gallery mode</em>); press it again to go back to normal mode. Press <code>M-S-x</code> to switch to the next random wallpaper - if it&rsquo;s in normal mode, turn on the gallery mode for a few seconds (to show the newly changed wallpaper) and go back to normal; if it&rsquo;s already in gallery mode, do nothing more.</p>

<p><a href="#wallpaper">jump to discussion</a></p></li>
</ol>


<p>OK, enough said. I think I might have left out a few features but there is already too much to talk about.</p>

<h1>Implementing the missing features</h1>

<h2><a id="window_history"></a>Window history navigation</h2>

<p>As a starting point, <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Actions-GroupNavigation.html">XMonad.Group.Navigation</a> provides a function <code>nextMatch</code> that can navigate back in history like this <code>nextMatch History (return True)</code> (shown as example in the doc). Here <code>(return True)</code> is the predicate to match all windows in history. However this is pretty useless since as soon as you go back to the last visited window the previous window becomes the new last visited one and essentially all this does is to toggle between two windows.</p>

<p>With a little thought though we can devise this simple barebone algorithm to improve upon that and allow for two-way navigation like in Vim</p>

<ul>
<li>before we go backwards in history we <strong>mark</strong> the current window (in some storage) and go to the next <strong>unmarked</strong> window in the history. So now pressing <code>M-o</code> multiple times would skip windows previously navigated to since they&rsquo;ve already been marked.</li>
<li>before we go forward in history we <strong>unmark</strong> the current window and go to the next <strong>marked</strong> window in the history. This requires a little more thought to bend the head around but think about this: when you go forward in history you are revisiting the windows that have previously been visited via <code>M-o</code>, so these windows <em>must</em> have been marked. At the same time you are annulling the effect of <code>M-o</code>s so that&rsquo;s the reason for unmarking.</li>
</ul>


<p>The algorithm is fairly simple so the details of the implementation are left to you to work out.</p>

<h2><a id="splitter"></a>Window groups</h2>

<p>To have <em>multiple buffers in the same splitter</em>, or in other words, <em>multiple windows occupying the same tile</em>, all one needs is a tabbed layout embedded in each tile. Luckily this has already been implemented by other people. Check out the <em>tiled tab groups</em> in <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Layout-Groups-Examples.html">XMonad.Layout.Groups.Examples</a></p>

<p><em>Note: the original tiled tab groups seem to have a few bugs to prevent consistent redrawing of the tablines. If you encounter any such problems you can contact me for a fix</em></p>

<p>A preview of the effect:</p>

<p style="text-align:center;"><img src="/images/xmonad/splitter.png" alt="" /></p>

<p>An implication of this change is that now <em>EVERY WINDOW</em> becomes a tab. Additionally, new windows won&rsquo;t change the outer layout in anyway - they just start as a new tab in the current group. This essentially eliminates any need for application-level window tabbing: now you don&rsquo;t need <a href="http://tools.suckless.org/tabbed/">suckless tabbed</a> for tabbing your xterm windows, or Firefox/Chrome for their ostentatious but aesthetically un-unifiable tabs. The responsibility of window management truely falls to XMonad and it does it tons better (I actually hope that Vim can delegate window management to XMonad too but apparently many functionalities can&rsquo;t be shared across in this way). Just a few reasons why this is so much better:</p>

<ul>
<li>one single keystroke to move the current tab to another group, in an entirely visual way. Still remember the &lsquo;groups&rsquo; from Firefox? You have to click the zoom button, drag the tab to the desired group and all. Also, now you can mix all sorts of &lsquo;tabs&rsquo; together - you can put a xterm tab with a browser tab - anyway you want.</li>
<li>shifting tabs with ease - again, single strokes to move the tab left/right in the group</li>
<li>create new groups with ease - move any tab out of the current group to form a new group</li>
<li>unified look and keyboard shortcuts</li>
</ul>


<p>This is precisely the reason why I&rsquo;ve changed almost all my applications to those without window tabbing e.g. Vimb for browsing. This makes everything so much simpler - every window can be treated in the same manner as if it&rsquo;s just a buffer in Vim.</p>

<h2><a id="prompt"></a>All the glories about prompts</h2>

<p>Prompts are an interesting addition to XMonad as they allow manual tasks to be performed anywhere and anytime in an unintrusive manner. However, I&rsquo;m not entirely satisfied by the line of prompt systems included in Contrib - most of them only allow input, and have neglected another important feature of prompt - showing real-time output of the query. This can be best illustrated by Spotlight from Mac OS X or better yet, Alfred. Both apps attempt to show the user search results from the query and allow the user to easily go to any result. I feel that XMonad&rsquo;s Prompt should do the same thing.</p>

<p>Here I&rsquo;ll list a few prompt systems I&rsquo;ve designed myself. Some are more complicated than others (might span a couple hundred of lines of code) and I won&rsquo;t indulge into the details. To better understand how a prompt system should be written it&rsquo;s better to consult the documentation directly at <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Prompt.html">XMonad.Prompt</a>. The main purpose here is to show what we can do rather than how it can be done.</p>

<h3>Information system</h3>

<p>The information system consists of a calculator (<code>calc</code> underneath) and a bunch of dictionaries (<code>sdcv</code> underneath). Press <code>Mod-c &lt;character&gt;</code> will activate the corresponding prompt i.e. <code>Mod-c &lt;digit&gt;</code> activates the calculator and puts that digit into the prompt whereas <code>Mod-c &lt;letter&gt;</code> activates the dictionaries and again puts that first letter into the prompt. In addition <code>Mod-c &lt;Return&gt;</code> will activate the prompt taking the words from the clipboard as the input.</p>

<p>When checking definitions for words one can press <code>`</code> to switch between different dictionaries e.g. WordNet, Thesaurus, etc.</p>

<p>Pressing <code>&lt;Return&gt;</code> for the calculator will copy the result into the clipboard whereas for the dictionaries will pronounce the word using <code>espeak</code>.</p>

<p>A screenshot of the calculator:</p>

<p style="text-align:center;"><img src="/images/xmonad/prompt_calc.png" alt="" /></p>

<p>And an example of using Chinese dictionaries:</p>

<p style="text-align:center;"><img src="/images/xmonad/prompt_dict.png" alt="" /></p>

<h3>Vimb prompt</h3>

<p>Vimb stores history and bookmarks in plain-text and that makes building a prompt for it (think about Omnibox for Firefox) a breeze. My implementation just repeatedly greps the words on the prompt in Vimb&rsquo;s bookmark and history file and outputs the result in formatted columns; and when the input is empty shows the last 10 visited URLs.</p>

<p style="text-align:center;"><img src="/images/xmonad/prompt_vimb.png" alt="" /></p>

<h3>Taskwarrior prompt</h3>

<p>I was once attracted by <a href="http://taskwarrior.org">Taskwarrior</a> and had since written a complete prompt system for it. Pressing <code>&lt;tab&gt;</code> and <code>&lt;S-tab&gt;</code> will autocomplete tasks and it also shows the real-time output for the filters used in the command. In addition, it autocompletes projects, due times, commands, etc. I&rsquo;ve also integrated <code>taskopen</code> into the system such that pressing <code>&lt;Return&gt;</code> on any focused task automatically opens the notes file for it.</p>

<p style="text-align:center;"><img src="/images/xmonad/prompt_task.png" alt="" /></p>

<h2><a id="topical_workspace"></a>Topical workspaces</h2>

<p>The implementations in Contrib on topical workspaces demand the user to put all the configurations into <code>xmonad.hs</code>. I found this too rigid and static - what if I just have created a new directory (a context) and want to start the workspace inside?</p>

<p>As a solution to my quagmire, I&rsquo;ve conjured up an entirely different approach - managing topics by tags. Every tag is represented by a directory, and a file/directory with multiple tags will be hard-linked in all those respective directories.</p>

<p>An example tag structure:</p>

<pre><code>$ tree -d ./dev
./dev
├── algorithm
│   └── web_crawler
├── applescript
├── c
│   └── va_list
├── c++
├── graphics
│   └── opengl
├── java
│   └── swing
├── keyboard
├── keyword
│   └── static
├── latex
├── matlab
├── mmd
├── obj_c
│   ├── arc
│   │   └── weak
│   ├── block
│   └── category
├── os
│   ├── android
│   ├── blackberry
│   ├── ios
│   │   ├── coredata
│   │   └── scrollview
│   └── osx
│       └── uti
├── python
├── regex
├── unix
│   └── bash
│       ├── condition
│       ├── find
│       ├── grep
│       ├── osascript
│       ├── sort
│       ├── string
│       └── xargs
└── web
    ├── ip
    ├── js
    ├── php
    ├── xml_rpc
    └── zend
</code></pre>

<p>Then the task of switching to a particular topic is as simple as searching in the tag database for the tag, creating a new workspace, and storing the path of that tag directory for this workspace. After that load the path for any newly spawned xterms, etc.</p>

<p>The searching of tags, again, is achieved via a prompt.</p>

<p style="text-align:center;"><img src="/images/xmonad/prompt_ws_view.png" alt="" /></p>

<h2><a id="dynamic_workspace"></a>Dynamic workspaces</h2>

<p>There is already <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Actions-DynamicWorkspaces.html">XMonad.Actions.DynamicWorkspaces</a> but I feel like wanting a little more.</p>

<p>What I&rsquo;ve added upon it:</p>

<h3>Assign each workspace to a symbol</h3>

<p>This is achieved via a customly defined <em>symbol stream</em>. It is similar to the Enum stream of <code>Char</code> in Haskell but slightly different - the order of the symbols is adjusted to maximize keyboard efficiency. For example, I&rsquo;ve defined the symbol stream for my workspaces as follow</p>

<pre><code>`123457890-=...
</code></pre>

<p>The <code>...</code> refers to any other symbols e.g. obtained from <code>enumFrom '='</code>. You might notice that <code>6</code> is left out of the symbol stream and that&rsquo;s right - I&rsquo;ve specifically assigned <code>Mod-6</code> to toggling between last visited workspaces, as a tribute to <code>&lt;Ctrl-6&gt;</code> in Vim. The first symbol, <code>`</code> denotes the temporary workspace and cannot be removed.</p>

<p>Why is binding each workspace to a symbol useful? Because then one can perform many tasks with these symbols efficiently.</p>

<p>For example</p>

<ul>
<li><code>Mod-&lt;symbol&gt;</code> switches to the workspace with that symbol</li>
<li><code>Mod-S-&lt;symbol&gt;</code> shifts the focused window to the workspace with that symbol</li>
<li><code>Mod-C-&lt;symbol&gt;</code> swaps the current workspace with the workspace with that symbol</li>
</ul>


<p>The symbol stream is also helpful for maintaining a consistent ordering of the workspaces in the <code>dynamicLog</code>.</p>

<h3>Bind renaming/adding workspaces to the topic selection prompt I explained in the previous section</h3>

<p>The original DynamicWorkspaces implementation simply allows you to type any string as the name of the current/new workspace. What I&rsquo;ve done is to replace this prompt with my prompt for topic selection - so renaming/adding workspace would at the same time switch the workspace to the given tag/context (and create the new tag directory if necessary).</p>

<h2><a id="window_jumping"></a>Window jumping</h2>

<p>This is the easiest task of all. Simply use <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Prompt-Window.html">XMonad.Prompt.Window</a> for <code>Mod-/</code> window searching and <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Actions-TagWindows.html">XMonad.Actions.TagWindows</a> for <code>Mod-m</code> and <code>Mod-'</code> window marking.</p>

<h2><a id="task_group"></a>Task groups</h2>

<p>The key to task groups is carefully modelled <code>Query Bool</code>s (see <a href="http://xmonad.org/xmonad-docs/xmonad/XMonad-ManageHook.html">manageHook</a>).</p>

<p>Basically what I&rsquo;ve done is defining the <code>Query Bool</code>s that match the windows in each task group.</p>

<p>Example:</p>

<pre><code class="haskell">windowGroups = siftedWindowGroups
    [ -- vimb instances
      def { filterKey = "b"
          , filterPredicate = className =? "Vimb"
          , onAbsence = vbPrompt
          }
      -- zathura instances
    , def { filterKey = "z"
          , filterPredicate = className =? "Zathura"
          , onAbsence = spawn "zathura"
          }
    ]
</code></pre>

<p>Using <code>ifWindows</code> from <a href="http://hackage.haskell.org/package/xmonad-contrib-0.11.2/docs/XMonad-Actions-WindowGo.html">XMonad.Actions.WindowGo</a> you can select the windows using the <code>Query Bool</code>; after that, you can pretty much imagine how to extend from it.</p>

<p>To ensure mutual exclusion among groups I&rsquo;ve also made it such that the task group of a window will be the first matched group in the definition list i.e. so in the above example, a vimb instance will never be considered a zathura instance.</p>

<p>Some interesting <code>Query Bool</code>s I&rsquo;ve made:</p>

<ul>
<li><code>isInCurrentWorkspace</code>: matches windows in the current workspace</li>
<li><code>currentGroupQuery</code>: returns the <code>Query Bool</code> of the task group for the currently focused window</li>
</ul>


<p>What all remains is to use list comprehension to generate all the possible key-chords for the actions. So for the above example we will probably generate <code>Mod-[ b</code> <code>Mod-] b</code> <code>Mod-d b</code> <code>Mod-[ z</code> <code>Mod-] z</code> <code>Mod-d z</code>, etc.</p>

<h2><a id="float_style"></a>Float styles</h2>

<p>This should be relatively straightforward, given that the concept of <em>task groups</em> is already established in the previous section. Use <code>currentGroupQuery</code> to get the task group of the current window and cycle through the pre-defined styles (just plain <code>ManageHook</code>s) accordingly. Of course you&rsquo;d need to store the index of the current style for each window so on next invocation of style-switching it will jump to the correct style, but it should be trivial to implement.</p>

<h2><a id="scratchpad"></a>Per workspace scratchpads</h2>

<p>The main technique for getting a per workspace scratchpad is through exploiting the original <code>namedScratchpadAction</code> function from <a href="http://hackage.haskell.org/package/xmonad-contrib-0.11.2/docs/XMonad-Util-NamedScratchpad.html">XMonad.Util.NamedScratchpad</a> like this</p>

<pre><code class="haskell">mkPerWSScratchpad cmd = do
    curr &lt;- gets (W.currentTag . windowset)
    con &lt;- perWSScratchpadContext curr
    dir &lt;- getCurrentWorkspaceDirectory
    let csterm = UniqueTerm con cmd "" in
        namedScratchpadAction [ NS "cs" (uniqueTermFullCmd dir csterm) (isUniqueTerm csterm) idHook ] "cs"
</code></pre>

<p>So that each time the function is triggered the <code>Query Bool</code> associated for selecting the scratchpad changes according to the workspace. The code above might be a little abstruse to understand, but basically</p>

<ol>
<li><code>perWSScratchpadContext</code> gets a particular context for the given workspace (a unique string for the workspace)</li>
<li><code>UniqueTerm</code> constructs a shell command that will spawn a xterm given a command to run and write the context obtained from the previous step into its own <code>appName</code></li>
<li><code>isUniqueTerm</code> checks whether a window is the particular xterm window obtained before by checking its <code>appName</code> field</li>
</ol>


<p>There are more subtle details to consider - for example, what happens when a workspace&rsquo;s name changes? that will change the context obtained from 1 and subsequently lose the scratchpad associated with the old name. To solve this problem we have to introduce another level of indirection: create a map that associates each workspace with a unique handle, and use that handle to generate the context string. When the workspace&rsquo;s name changes it should still be made to point at the same handle so the old scratchpad is still valid for use.</p>

<h2><a id="wallpaper"></a>Dynamic wallpaper system</h2>

<p>This last part is actually not that necessary in terms of functionality; but I still made it for the sake of my aesthetics. <a href="http://hackage.haskell.org/package/xmonad-contrib-0.11.2/docs/XMonad-Hooks-FadeInactive.html">XMonad.Hooks.FadeInactive</a> provides the function <code>fadeIf</code> to paint arbitrary transparencies to windows matching a <code>Query Bool</code> and if you&rsquo;ve followed through this long post then you might immediately get the idea.</p>

<p>The described <em>gallery mode</em> is nothing more than painting transparencies to all windows; whereas the <em>normal mode</em> only excludes the focused window.</p>

<p>The trick for going into <em>gallery mode</em> for a few seconds and then going back is to use <a href="http://hackage.haskell.org/package/xmonad-contrib-0.11.2/docs/XMonad-Util-Timer.html">XMonad.Util.Timer</a>, which provides a simple interface to construct a timer and do something when the time is up.</p>

<p>Of course, you still need to write your own script or install certain applications to actually switch the wallpaper, but that should be a piece of cake.</p>

<h1>Conclusion</h1>

<p>I have imagined that this would be a very long post and indeed it is. During writing I myself had to pause for a few times to try to remember what I was doing with <em>that</em> particular part of the code and what I was trying to achieve. To be honest I haven&rsquo;t talked much about the implementation details in most cases. This post is more about summarizing my current understanding and imagery of a modern <em>- or rather, geeky -</em> window manager and what I have done to approach my ideals. Maybe in the future my ideals will change again and then I should redo/rewrite everything. But as always, <em>joy lies in endless tinkering / 折腾就是快乐</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pinboard synchronization with Vimb/Vimprobable bookmarks]]></title>
    <link href="http://lynnard.tk/blog/2013/11/03/pinboard-synchronization-with-vimb-slash-vimprobable-bookmarks/"/>
    <updated>2013-11-03T02:25:00+00:00</updated>
    <id>http://lynnard.tk/blog/2013/11/03/pinboard-synchronization-with-vimb-slash-vimprobable-bookmarks</id>
    <content type="html"><![CDATA[<p>When it comes to workflow, I&rsquo;m a screen-estate <em>fascist</em> who disapproves of any &lsquo;extra&rsquo; GUI elements like buttons and menu-bars. That&rsquo;s why I switched to Vimperator from conventional idioms like Safari and Firefox a long time ago; and that&rsquo;s also the reason that I switched to <a href="https://github.com/fanglingsu/vimb">Vimb</a>/<a href="http://www.vimprobable.org">Vimprobable</a> from Vimperator in the end - if all I need is Vim-like features from Vimperator, why bother having Firefox in the first place?</p>

<p>All is well except a few things. One of them is what I&rsquo;m going to talk about today, bookmark synchronization with popular online services. With light-weight browsers such as Vimb, you can&rsquo;t really expect the developer to write extensions for such things <em>(well, how many developers does Vimb have? Mhh, just one)</em> However, this simplicity is also the beauty of such light-weight programs - usually you can just achieve what you want by a little bit of tinkering.</p>

<p>To start with, the social bookmark service I&rsquo;m using is <a href="http://pinboard.in">Pinboard</a> and they offer an easy-to-understand, comprehensive api <a href="http://pinboard.in/api">here</a>. On the other hand, Vimb is even more straightforward on the treatment of bookmarks - it simply stores them in plain-text under its config directory.</p>

<p>With knowledge above we can easily build a synchronizer from scratch. The problem of synchronization is really about two smaller sub-problems:</p>

<ol>
<li>When the local storage (Vimb bookmark file) changes, reflect the change on the cloud</li>
<li>When the cloud storage (Pinboard) changes, translate the change to local</li>
</ol>


<p>For point 1 we can keep a backup of the bookmark file and use <code>diff</code> on it with the current file each time before the update. This gives us the changes, if any, done to the bookmark file since the last update and all remains is just doing the same thing on the cloud.</p>

<p>For point 2 Pinboard has offered a convenient query method <code>/posts/update</code>, which essentially returns the timestamp of the latest change. By retrieving this timestamp before each update cycle we can be sure that we won&rsquo;t miss any updates on the cloud.</p>

<p>Of course this leaves out details such as which should be performed before which, how we should avoid unnecessary pulling from the cloud given that some of the changes on the cloud are done by the script itself; but the main idea is still the same.</p>

<p>For completeness the whole script is <a href="downloads/code/pinboard">here</a> for download. The main abstract of the code is shown below</p>

<pre><code class="sh"># $1 is the method to query upon, $2 is the file to direct the output, while all the subsequent arguments
# in the format 'name=value' are appended as data arguments to
# the query
#---------------------------------------------------------------
function pinboard_api() {
    local datastring= data=
    for data in "${@:3}"
    do
        # we need to escape the single quote..merr...
        datastring="$datastring --data-urlencode \$'${data//\'/\'}'"
    done
    eval $CURL_CMD$datastring $HTTPS_PREFIX$1$AUTH_TOKEN &gt; $2
    local CURL_EXIT_CODE="$?"
    if [[ $CURL_EXIT_CODE != "0" ]] ; then
        error "Curl failed with exit code $CURL_EXIT_CODE"
    fi
}

#---------------------------------------------------------------
function verify_config() {
    if [[ ! -e "$PINBOARD_CFG" ]]; then
        error "Could not find $PINBOARD_CFG file! \nIt should contain two lines. Line 1 the username. Line 2 the API token. \nYou can create it manually, or use the \"login\" command."
    fi

    USER_NAME=`head -n1 $PINBOARD_CFG`
    API_TOKEN=`tail -n1 $PINBOARD_CFG`
    AUTH_TOKEN="?auth_token=$USER_NAME:$API_TOKEN"
}

# This will compare the current update with the last update and
# return true if there's new update
#---------------------------------------------------------------
function pinboard_has_update() {
    # See if we need to do an update at all
    echo "Retrieving current pinboard update time..."
    pinboard_api "/posts/update" "$CUR_UPDATE_FILE"
    if [[ ! -e "$LAST_UPDATE_FILE" ]]; then
        echo "$LAST_UPDATE_FILE does not exist..."
        return 0
    else
        # Compare current update with last update
        echo "Comparing last update with current update..."
        diff "$CUR_UPDATE_FILE" "$LAST_UPDATE_FILE"
        if [[ ! "$?" == "0" ]]; then 
            return 0
        fi ;
    fi
    return 1
}

#---------------------------------------------------------------
function synchronize_cmd() {
    local to_update_pinboard=false to_update_local=false
    echo "######## Checking changes on the server ########"
    verify_config
    pinboard_has_update &amp;&amp; to_update_pinboard=true
    echo "######## Starting local-to-cloud synchronization ########"
    # first compare the two bookmarks file to see if there are any changes
    if [[ -e "$BOOKMARK_BACKUP_FILE" ]]; then
        echo "Detecting changes to the bookmark file..."
        local changes="`diff "$BOOKMARK_BACKUP_FILE" "$BOOKMARK_FILE"`" 
        if [ -n "$changes" ]; then
            to_update_local=true
            # we need to grep for all deletions 
            echo "$changes" | grep '^&lt;' | while read line; do
                delete_pinboard_bookmark_from_vimb_format "${line#&lt; }" 
            done
            # have to exit the script if error occurred
            (( $? != 0 )) &amp;&amp; exit "$?"
            echo "$changes" | grep '^&gt;' | while read line; do
                insert_pinboard_bookmark_from_vimb_format "${line#&gt; }" 
            done
            (( $? != 0 )) &amp;&amp; exit "$?"
        else
            echo "No local-to-cloud synchronization required. Local bookmark storage is in sync with pinboard account."
        fi
    else
        to_update_local=true
        echo "Bookmark file has not been backed up before. Trying to insert all entries..."
        while read line; do
            insert_pinboard_bookmark_from_vimb_format "$line"
        done &lt; "$BOOKMARK_FILE"
    fi

    if $to_update_local; then
        # we have updated the server so we should refresh the update time
        echo "Refreshing the last update time..."
        pinboard_api "/posts/update" "$CUR_UPDATE_FILE"
    fi

    echo "######## Starting cloud-to-local synchronization ########"
    if $to_update_pinboard; then
        echo "Retrieving bookmarks..."
        pinboard_api "/posts/all" "$CURL_TMP"
        # we need to convert the format into vimb's format
        xml sel -t -m '/posts/post' -c '.' -n "$CURL_TMP" | while read line; do
            # retrieve the attributes
            local href="`echo "$line" | xml sel -t -v '/post/@href'`"
            local desc="`echo "$line" | xml sel -t -v '/post/@description'`"
            local tag="`echo "$line" | xml sel -t -v '/post/@tag'`"
            # just adding the bookmark to tmp file
            insert_vimb_bookmark "$href" "$desc" "$tag"
        done
        # move the tmp file to overwrite the old bookmark file
        # this might be dangerous if there're unsynced changes in the bookmark file 
        # but for the time being we'd assume that the bookmark file is already in sync with
        # the cloud
        echo "Overwriting the old bookmark file..."
        mv -f "$BOOKMARK_TMP" "$BOOKMARK_FILE"
    else
        echo "No cloud-to-local synchronization required. $BOOKMARK_FILE is current."
    fi

    # back up the bookmark file
    if $to_update_local || $to_update_pinboard; then
        echo "Backing up the current bookmark file..."
        cp -f "$BOOKMARK_FILE" "$BOOKMARK_BACKUP_FILE"
    fi

    echo "Moving current update time to last update time..."
    mv -f $CUR_UPDATE_FILE $LAST_UPDATE_FILE
    echo "Done."  
}

#---------------------------------------------------------------
function login_cmd() {
    if [[ ! -d "$PINBOARD_DIR" ]]; then
        mkdir "$PINBOARD_DIR"
    fi

    if [[ ! -d "$PINBOARD_DIR" ]]; then
        echo "$PINBOARD_DIR could not be made."
        exit 1
    fi

    echo "We will attempt to log into pinboard now."
    `which echo` -n "Please enter pinboard username: "
    local USER_NAME=`head -n 1`
    echo $USER_NAME &gt; "$PINBOARD_CFG"

    $CURL_CMD -u $USER_NAME "$HTTPS_PREFIX/user/api_token" | tail -n 1 | sed 's/&lt;[^&gt;]*&gt;//g' &gt;&gt; $PINBOARD_CFG
    local CURL_EXIT_CODE="$?"
    if [[ $CURL_EXIT_CODE != "0" ]]; then
        echo "Curl failed with exit code $CURL_EXIT_CODE"
        exit 1
    fi

    if [[ ! -e "$PINBOARD_CFG" ]]; then
        echo "$PINBOARD_CFG could not be made."
        exit 1
    else 
        chmod og-rw "$PINBOARD_CFG"
    fi

    echo "Created $PINBOARD_CFG."
    echo "Logged in!"
}

#***
# "Main"
#***

if [[ $# -lt 1 ]]; then
    error "Expected a command for the second argument. \nTry \"help\"."
fi

#***
# Process the second commands
#***
case "$1" in
    synchronize) 
        [ "PINBOARD$PPID" = "$LOCKRUNPID" ] || exec lockrun -qna PINBOARD /tmp/lockrun.pinboard "$0" "$@" || exit 1
        synchronize_cmd
        ;;
    login) 
        login_cmd
        ;;
    help) 
        help_cmd 
        ;;
    *)
        error "Unknown command $1. Try \"help\"." 2
esac

# exiting without any errors
exit 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing the missing drafting and queueing function in Octopress]]></title>
    <link href="http://lynnard.tk/blog/2013/11/03/implementing-the-missing-drafting-and-queueing-function-in-octopress/"/>
    <updated>2013-11-03T00:37:00+00:00</updated>
    <id>http://lynnard.tk/blog/2013/11/03/implementing-the-missing-drafting-and-queueing-function-in-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I first started using Octopress. Its simple and elegant way of writing has now become my <em>de facto</em> standard of writing, but there are still things to be desired. For one thing, the workflow consisting of <em>writing, commiting, compiling and deploying</em> is still not <em>lazy</em> enough; ideally the only thing that should be required of the writer is <em>to write</em>. Inspired by Dennis Wegner in his <a href="http://instant-thinking.de/2012/08/03/synced-and-scheduled-blogging-with-octopress/">Synced and scheduled blogging with Octopress</a>, I worked on a bash script to allow for friction-free, painless deployment process that goes totally automatic underhood.</p>

<h3>A short summary of the tinkering</h3>

<ol>
<li>Like in Dennis&#8217;es original post, two new folders called <code>_drafts</code> and <code>_queue</code> are added to the <code>source</code> directory to hold drafts and queued posts respectively.</li>
<li><p>Again, just like in the original post, you can put any markdown files within the <code>_drafts</code> folder; as soon as there&rsquo;s the <code>published: true</code> property within the YAML front matters like this</p>

<pre><code> ---
 published: true
 ---
</code></pre>

<p> Then the draft will be moved to the <code>_queue</code> folder</p></li>
<li>All the files within the <code>_queue</code> folder will be checked for its <code>date</code> property in the YAML front matters; if it&rsquo;s before the current time, then the file will be moved to the <code>_posts</code> folder for publishing</li>
</ol>


<h3>So what&rsquo;s added / improved?</h3>

<ol>
<li>The script automatically checks for the validity of the YAML front matters during each move of any post; among other things, it will add the following properties if absent:

<ul>
<li>date: the last modified date of the file is used; this is useful if you don&rsquo;t want to take the creation date for the draft as the date published on your website (which is the weird default behavior of Octopress) &ndash; in that case just leave this field blank and it will be added automatically when the draft gets moved to the queue (or when you put a file yourself into the queue)</li>
<li>layout: <code>post</code> is assumed as the default layout, which should be sensible enough</li>
<li>title: the file name of the post (subtracting the date prefix, if any) is used</li>
</ul>


<p> What all these mean is that the minimal setup you&rsquo;d need to have for a post is</p>

<p> <strong>Either</strong></p>

<ol type="a">
<li>touch a new file in <code>_drafts</code> with its file name as the title</li>
<li>when finished, add <code>published: true</code> to the top (don&rsquo;t forget the triple dashes)</li>
</ol>


<p> <strong>OR</strong></p>

<ol type="a">
<li>touch a new file anywhere with its file name as the title</li>
<li>when finished, move it to <code>_queue</code>; the file will then be published during the next update</li>
</ol>


<p> <em>The second approach eliminates the need to have the YAML front matters entirely</em></p></li>
<li><p>The script checks for <strong>all changes</strong> within the <code>octopress</code> directory using <code>git diff</code> and <code>git ls-files</code>. This means compared to the approach in the <a href="http://instant-thinking.de/2012/08/03/synced-and-scheduled-blogging-with-octopress/">original post</a>, now the website will be rebuilt even when files like <code>_config.yaml</code> is changed</p>

<p> Note that this might not be optimal if you&rsquo;ve had <code>_queue</code> and <code>_drafts</code> tracked by git. In that case whenever a draft is changed or something gets moved into the queue then the source will be commited, changes pushed to the remote, website rebuilt and all. I myself have excluded these two directories from git because I don&rsquo;t like the idea of having my drafts posting up to the cloud (I&rsquo;m using GitHub as my host and I&rsquo;m <em>a little</em> against having my unpolished thoughts shown in public) and I&rsquo;ve had Dropbox versioning control these posts in the first place.</p>

<p> However, if you&rsquo;re pointing your source to a private remote, then it might be a good idea for versioning control your drafts. In that case I&rsquo;d recommend you change the script to auto-commit the changes in <code>_drafts</code> and <code>_queue</code> but exclude website re-compiling in such cases by greping the output of <code>git diff</code> and <code>git ls-files</code> to see if all changes happen in these directories.</p></li>
</ol>


<h3>Where to download?</h3>

<p>You can download the whole source file <a href="downloads/code/octopress">here</a>. Below shows a preview of the code:</p>

<pre><code>case $1 in
    rake) 
        cd "$OCTOPRESS_HOME"
        rake "${@:2}"
        ;;
    update)
        # first move the files in the draft to queue if the draft property is set to true
        echo "######## Checking for finished drafts ########"
        # try to find all the markdown and md files
        find "$OCTOPRESS_DRAFTS_DIR" -type f \( -name '*.markdown' -o -name '*.md' \) | while read draft
        do
            # get the published property; if no published property is found then default to false
            if [ "`valueForProperty "$(YAMLFrontMatterOfPost "$draft" false)" 'published'`" = 'true' ]; then
                new_post_name="`fullNameOfPost "$draft"`"
                echo "$draft: Published is true, moving to queue folder (renaming to $new_post_name)..."
                mv -n "$draft" "$OCTOPRESS_QUEUE_DIR/$new_post_name"
            fi
        done
        # second move the files in the queue to the post directory if the date specified is in the past
        echo "######## Checking for publishable posts in the queue ########"
        find  "$OCTOPRESS_QUEUE_DIR" -type f \( -name '*.markdown' -o -name '*.md' \) | while read post
        do
            currDate="`date '+%s'`"

            # get the post name to ensure that date etc are properly initiated
            new_post_name="`fullNameOfPost "$post"`"
            dateString="`valueForProperty "$(YAMLFrontMatterOfPost "$post")" 'date'`"
            dateString="${dateString% *}"

            postDate="`date -d "$dateString" '+%s'`"

            if ((postDate &lt; currDate)); then
                echo "$post: Post date is in the past, moving to post folder (renaming to $new_post_name)..."
                mv -n "$post" "$OCTOPRESS_POSTS_DIR/$new_post_name"
            fi
        done

        echo "######## Checking for changes in the source directory ########"
        cd "$OCTOPRESS_HOME"
        to_update=false
        # first check if there is any change in the source branch; if there's then commit and update
        # diff --quiet checks whether there's change in the tracked files; the second command checks whether there's untracked file
        # the draft and queue folders are UNTRACKED; so you can basically do anything you want for the drafts 
        if ! git --no-pager diff --exit-code || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            echo "Changes to the octopress directory detected."
            to_update=true
        elif ! [ -e "$OCTOPRESS_STATUS_FILE" ]; then
            echo "No last update status found." 
            to_update=true
        elif [ "`cat "$OCTOPRESS_STATUS_FILE"`" = 1 ]; then
            echo "Last update failed."
            to_update=true
        fi

        echo "######## Beginning update ########"
        if $to_update; then
            echo "Commiting changes in the source branch..." 
            # the add commit phase don't really count towards update result as it can give back error code if there's nothing to commit
            git add -A 
            git commit -m "Source updated" 
            echo "Pushing changes to remote..." \
            &amp;&amp; git push origin source \
            &amp;&amp; echo "Generating and deploying the website..." \
            &amp;&amp; rake gen_deploy \
            &amp;&amp; echo 0 &gt; "$OCTOPRESS_STATUS_FILE" \
            || echo 1 &gt; "$OCTOPRESS_STATUS_FILE"
        else
            echo "Nothing to update."
        fi
        ;;
    *)
        usage
        ;;
esac
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lynnard's very first nerdy rant about blogging]]></title>
    <link href="http://lynnard.tk/blog/2013/07/30/the-very-first-blog-post/"/>
    <updated>2013-07-30T12:08:00+01:00</updated>
    <id>http://lynnard.tk/blog/2013/07/30/the-very-first-blog-post</id>
    <content type="html"><![CDATA[<p>Finally opened my own blogspace. I&rsquo;ve been dreaming about this day for a <em>long, long</em> time but never got time to set it up properly. For one thing, the <em>common</em> blogging scene is so crowded with web-interface-backed alternatives such as Wordpress - which at best is cumbersome and not <em>hacker-minded</em>. An easy dig around the net reveals to me the gem in the sea: <strong>Octopress</strong>.</p>

<h2>What is Octopress?</h2>

<ul>
<li>Write your blogs in <code>Markdown</code> with <em>any</em> editor (Sweet, <code>vim</code> it is)</li>
<li>Include code like skateboarding in the sky</li>
</ul>


<pre><code>$ rake new_post["I like to write blog in CLI"]
$ rake preview
</code></pre>

<ul>
<li>Version control your blog like any code in Github</li>
</ul>


<h2>Gotcha</h2>

<pre><code>As a `Pandoc` loyalist, Octopress's choice of using `rdiscount` as its default `Markdown` compiler without a doubt unnerves me. Therefore the first thing to do is to integrate Pandoc into Octopress. Fortunately a little [post](http://drz.ac/2013/01/03/blogging-with-math/) helped me.
</code></pre>

<p>Unfortunately the Pandoc solution is <strong>NOT</strong> working for me. For the time being I&rsquo;ll be settling with Octopress&rsquo;s own codeblock feature or its github code fencing filter.</p>

<h2>Gonna be different?</h2>

<p>One biggest problem with Octopress is its poor support for themes (or rather, the dearth of the themes?), which leads to the fact that <strong>almost every Octopress blog looks exactly the same</strong>. To be fair the default theme looks perfectly fine to my eyes; but after seeing it being used with only changes in background wallpaper across <em>countless</em> other blogs it&rsquo;s out of luck for me. A purist needs something simple, functional, and yet <em>a little</em> different. That&rsquo;s why I decided to settle on <a href="http://zespia.tw/Octopress-Theme-Slash/index.html">slash</a>. In future I might tweak the theme myself to suit my needs but all is good for now.</p>

<h2>What about working on the go?</h2>

<p>This, however, is a big problem. The un*xy set of utilities sported by Octopress on CLI affords great flexibility and extensibility when working on a computer, but when you are left with only an iPhone or an Android then all becomes a giant <strong>PITA</strong>. I do wonder from time to time why no phone manufacturer has ever introduced a phone with a proper Terminal interface - which would definitely thrill up a huge crowd of nerds - but apparently nerds (read 屌丝) are just out of consideration for any manager.</p>

<p>I&rsquo;m to have a Blackberry Q10 in October so ideally there can be some solution for this great phone with its great QWERTY keyboard. One thing I can think of is to have a server running 24hr that monitors my Dropbox directory and recompiles my website whenever a change is made; at the same time use some text editor to edit the posts on my phone; or better yet, just use a SSH client and &hellip;</p>

<p><em>Oh forget about it.</em></p>
]]></content>
  </entry>
  
</feed>
