<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xmonad | .hack/lynnard]]></title>
  <link href="http://lynnard.tk/blog/categories/xmonad/atom.xml" rel="self"/>
  <link href="http://lynnard.tk/"/>
  <updated>2014-10-31T20:26:19+00:00</updated>
  <id>http://lynnard.tk/</id>
  <author>
    <name><![CDATA[Lynnard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIMonad- transforming XMonad to Vim with Motion Keys, Register, Visual Mode, Macros, ...]]></title>
    <link href="http://lynnard.tk/blog/2014/06/11/vimonad/"/>
    <updated>2014-06-11T16:19:00+01:00</updated>
    <id>http://lynnard.tk/blog/2014/06/11/vimonad</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally got the time to clean up my XMonad configurations, split them into modules, and formally made a fork at <a href="http://vimonad.lynnard.tk">VIMonad</a>.</p>

<p>You can find all the description and documentation on its project page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More prompt stuff: reverse completion, colored prompt, dynamic prompt/preview widget]]></title>
    <link href="http://lynnard.tk/blog/2014/02/24/more-prompt-stuff/"/>
    <updated>2014-02-24T17:00:00+00:00</updated>
    <id>http://lynnard.tk/blog/2014/02/24/more-prompt-stuff</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since I last wrote something on XMonad. It&rsquo;s not that I don&rsquo;t have anything to share in the last couple of weeks, but rather, I felt it a little bit troublesome to explain some of my most recent tweaks. But enough with my laziness, I finally decided to spend some quality time to write on these nifty new things.</p>

<h1>Reverse completion</h1>

<p>I&rsquo;ve always wondered why the default prompt does not support <code>Shift+Tab</code> to move the focus up the completion menu. So I basically added another branch in the main loop of the prompt system such that whenever a <code>Shift+Tab</code> is pressed it passes a <em>reversed</em> list of the completion items to the <code>completionFunction</code> - achieving what I want in most cases.</p>

<h1>Colored prompt</h1>

<p>Ever thought about having a colorful prompt system within XMonad? Now it is possible. I first got this idea when I was working on the taskwarrior prompt system - the taskwarrior program supports outputting ANSI colors, but apparently the stock XMonad.Prompt wouldn&rsquo;t do anything for that extra information.</p>

<p>The functions behind these color renderings aren&rsquo;t terribly complicated - it just looks for terminal color sequences and transform them into hex color codes that can be printed easily using standard X library.</p>

<p style="text-align:center;"><img src="/images/xmonad/colored_prompt.png" alt="" /></p>

<p>However, here&rsquo;s the catch: if you are going with the color, make sure you know something about color encoding and have the time and effort to tweak it to make it look nice. Unfortunately I have neither of those and that&rsquo;s why I ended up not using any color after all.</p>

<h1>More on Dynamic Prompt</h1>

<p>The concept of dynamic prompt was first introduced in one of my earlier <a href="/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position/">post</a>.</p>

<p>One major gripe I&rsquo;ve always had regarding standard unix tools is that it&rsquo;s not that straightforward to perform certain tasks chained together in a visual and direct way.</p>

<p>For example, say you want to remove a file. You know it&rsquo;s located in a folder with <code>Prompt</code> in its name. You also know that the file has the keyword <code>shell</code> inside.</p>

<p>What you&rsquo;d normally do is probably like this:</p>

<h3>Step 1</h3>

<pre><code>$ pwd
/home/lingnan/DB/indie/XMonad
$ find * -name '*Prompt*'
XMonadContrib/dist/build/XMonad/Prompt
XMonadContrib/XMonad/Prompt
</code></pre>

<p>Now you remember that the folder you are looking for is <code>XMonadContrib/XMonad/Prompt</code>.</p>

<h3>Step 2</h3>

<pre><code>$ grep -R 'shell' XMonadContrib/XMonad/Prompt
XMonadContrib/XMonad/Prompt/Shell.hs:A shell prompt for XMonad
XMonadContrib/XMonad/Prompt/Shell.hs:    , shellPrompt
</code></pre>

<p>Now you&rsquo;ve found the file! It&rsquo;s <code>XMonadContrib/XMonad/Prompt/Shell.hs</code>.</p>

<h3>Step 3</h3>

<pre><code>$ rm XMonadContrib/XMonad/Prompt/Shell.hs
</code></pre>

<p>It&rsquo;s not terribly complicated, but it&rsquo;s certainly nowhere near convenient.</p>

<p>That&rsquo;s where my <strong>dynamic prompt widget</strong> comes in. Basically each of these widgets defines a <em>keyword</em> and as long as one such keyword is detected on the prompt line, anything after that <em>keyword</em> is passed to the relevant widget, which will then display the appropriate autocompletions for the user to complete against.</p>

<h2>Search Widget</h2>

<p>Currently there are 8 search widgets</p>

<ul>
<li><code>f</code>: search for recent files using <code>fasd</code></li>
<li><code>a</code>: search for recent files or directories using <code>fasd</code></li>
<li><code>d</code>: search for recent directories using <code>fasd</code></li>
<li><code>z</code>: search for recent directoties using <code>fasd</code>; on completion substitute the prompt line command such that it&rsquo;s suitable for changing directory from the prompt</li>
<li><code>l</code> (locate): search for files recursively in a given directory (or the current one, if not specified) using <code>find</code></li>
<li><code>t</code> (tag): search for a directory in my tag database using <code>find</code></li>
<li><code>g</code> (grep): list all files containing the given words</li>
<li><code>gp</code> (pdfgrep): list all pdf files containing the given words</li>
</ul>


<p>So for the same problem we discussed before, it can be done with my dynamic prompt system in the following way:</p>

<h3>Step 1</h3>

<p>Invoke the prompt. Since you want to remove a file, just type in <code>rm</code>.</p>

<h3>Step 2</h3>

<p>Now you realize that you don&rsquo;t know the exact location of the file. You remember that the file contains the word <code>shell</code>. That means we should use <code>g</code> widget to grep for <code>shell</code>. So you type in another <code>g</code>. The prompt line is now <code>rm g</code>.</p>

<h3>Step 3</h3>

<p>You want to narrow down to a directory having <code>Prompt</code> in its name instead of greping blindly in the current directory which might contain 1000 files. That means we need to use <code>l</code> widget to locate that directory and pass it back to the <code>g</code> widget as its argument. So type in <code>l Prompt</code>. Now you&rsquo;ll get some screen like this:</p>

<p style="text-align:center;"><img src="/images/xmonad/widget1.png" alt="" /></p>

<p>Now press tab to autocomplete. The completion algorithm is smart enough to remove the preceding widget keyword automatically - <code>l</code> in this case.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget2.png" alt="" /></p>

<h3>Step 4</h3>

<p>Now you&rsquo;ve got the directory to grep in. Finish typing by adding the word to grep against.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget3.png" alt="" /></p>

<p>Like before, tab through to the right file to make the final prompt line look like this:</p>

<p style="text-align:center;"><img src="/images/xmonad/widget4.png" alt="" /></p>

<h3>Step 5</h3>

<p>Press <em>Return</em> to execute the command.</p>

<p>After this lengthy explanation, you might jump up and say: <em>gosh, that&rsquo;s complicated!</em> The fact that there seem to be more steps with my system than with the standard unix tools is because I&rsquo;m trying to explain all the details as clearly as possible. In practice my system is designed to be as close to your thinking process as possible - type the action you want to achieve directly, and when you want to get hold to some file as the argument to the action you are trying to complete, just use one of the widgets to help you out.</p>

<h3>Preview widget</h3>

<p>If you are familiar with <code>ranger</code>, you&rsquo;d know that it uses a preview script to render information about the file you are working on. The same works for my dyanmic prompt - if you&rsquo;ve given a file argument on the prompt, press another <code>Space</code> would trigger the previewing of that file argument.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_source.png" alt="previewing a source file" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_pdf.png" alt="previewing a pdf file" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_zip.png" alt="previewing a zip file" /></p>

<h3>Other widgets</h3>

<p style="text-align:center;"><img src="/images/xmonad/widget_top.png" alt="top" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_git.png" alt="git" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supercharge your XMonad! Colored Tabs, Dynamic Prompt, Window/Workspace Insert Position]]></title>
    <link href="http://lynnard.tk/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position/"/>
    <updated>2014-01-06T17:57:00+00:00</updated>
    <id>http://lynnard.tk/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s another post to show some of my latest hacks on XMonad.</p>

<h1>Colored Tabs</h1>

<p style="text-align:center;"><img src="/images/xmonad/color_tabs.png" alt="" /></p>

<p>One of the things that annoyed me for the Tabbed layout is that I couldn&rsquo;t make out which program is in which tab from the look of the tabs alone easily. Having a different theme for different <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">task groups</a> thus becomes a natural choice for me.</p>

<p>To apply this mod the key is to modify the <code>updateDeco</code> method in <code>XMonad.Layout.Decoration</code>.</p>

<p>A little thanks goes to <em>OODavo</em> from <em>#xmonad</em>.</p>

<h1>Dynamic Prompt</h1>

<p>The stock <code>XMonad.Prompt.Shell</code> is fine but I can&rsquo;t think of any other things it can do aside from launching programs.</p>

<p>My dynamic prompt, in contrast, serves to</p>

<ul>
<li>launch apps with shell completion (of course)</li>
<li>render output directly in the autocompletion window for <em>some</em> commands <em>e.g. man head</em></li>
<li>opens the file or directory on prompt directly using <a href="http://ranger.nongnu.org/">rifle</a></li>
</ul>


<p>Now I don&rsquo;t have to launch a ranger instance in each and every workspace anymore.</p>

<h1>Window/Workspace Insert Position</h1>

<p>This one is not totally necessary (I think), but I consider it useful at times.</p>

<h2>Window Insert Position</h2>

<p>Using <code>XMonad.Hooks.InsertPosition</code> you can easily decide whether the focus should stay with the old window or transfer to the new window when it is created; the module also claims to support changing the insert position of the new window but I haven&rsquo;t been able to make that work (probably it&rsquo;s a compatibility problem with my complicated custom layout). I&rsquo;ve further extended this module to allow dynamic toggling of the <em>focus-stay-with-old-or-new-window</em> feature (let&rsquo;s call it <em>window insert position</em> feature) via a keyboard shortcut.</p>

<p>Why would this be useful? Imagine you are using a browser application like <code>vimb</code>; it does not manage windows itself so new web pages opened by it will always take the focus in XMonad. Now with this mod you can decide that behavior. In fact I&rsquo;ve defined <code>g;t</code> in my <code>vimb</code> (the shortcut responsible for entering the hint mode and continue opening the activated links until the mode is quit via <code>Esc</code>) such that it automatically opens the tab in the background and when it finishes recovers the old <em>window insert position</em> configuration.</p>

<h2>Workspace Insert Position</h2>

<p>Continuing from my <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">Dynamic Workspace</a>, the following keybinding are added:</p>

<ul>
<li><code>M-a {a,M-a}</code>: launches the workspace creation prompt and on completion insert the workspace <em>just after the current one</em></li>
<li><code>M-a {i,M-i}</code>: same as before but on completion insert the workspace <em>just before the current one</em></li>
<li><code>M-a {I,M-I}</code>: you&rsquo;ve guessed it; insert at the beginning</li>
<li><code>M-a {A,M-A}</code>: insert at the end</li>
</ul>


<p>There is another set of key bindings beginning with <code>M-S-a</code> which creates the new workspace in the same way but also at the same time move the current window to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More XMonad goodies: 3-dimensional Workspace, Window Sorting and Shelving]]></title>
    <link href="http://lynnard.tk/blog/2013/12/30/more-xmonad-goodies/"/>
    <updated>2013-12-30T23:37:00+00:00</updated>
    <id>http://lynnard.tk/blog/2013/12/30/more-xmonad-goodies</id>
    <content type="html"><![CDATA[<p>Following up my previous <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/">entry</a> on some <em>advanced vim-like</em> feature addition to XMonad, I&rsquo;ve played around with my configuration a bit more and apparently made it more than 2000 lines, marking a new milestone where my config file has even more lines than the core xmonad source.</p>

<p><em>Well, that can be a good or bad thing, depending on how you look at it.</em></p>

<p>But the good news is that most of the new additions I consider quite useful, and therefore would take some time here to share them with those interested.</p>

<h1>3-dimensional Workspace</h1>

<h2>Inception</h2>

<p>If you&rsquo;ve followed my previous blog on XMonad then hopefully you&rsquo;ve grasped my idea at building a <em>vim-splitter-like</em> layout for workspaces (if you&rsquo;ve forgotten by now, <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#splitter">here</a>&rsquo;s the refreshment).</p>

<p>After I wrote that article, I&rsquo;ve taken some more serious moments at pondering about this and have gotten a few more insights:</p>

<ol>
<li>For the inner-most layout, <strong>Tabbed</strong> is still by far the most efficient available. The functional equivalent in vim is a <em>split view</em>. The rationale here is that you want to divide the whole screen into some non-overlapping rectangles, but at the same time you want to allow some windows to be <em>viewed</em> from the same rectangle. For example, imagine you have two rectangles - one for <em>research</em>, and the other for taking <em>notes</em> - you might want to open multiple browser windows in the <em>research</em> rectangle and switch between them while keeping the same <em>notes</em> rectangle on the other side.</li>
<li>What&rsquo;s the best layout for managing these <em>rectangles</em>, you ask? For me, I used the stock <strong>Tall</strong> layout for a <em>long, long</em> time but I had to admit it&rsquo;s not very efficient. For one thing, although you have all the rectangles tiled, their position and width are not really controllable - the only thing you can do is shrinking and expanding the master view. On the other hand, the rectangles are essentially tiled in a one-dimensional manner - you navigate through these rectangles using <em>up&rsquo;s</em> and <em>down&rsquo;s</em> and at each point of time you only have access to this one axis.</li>
<li>Again we turn to vim for inspiration - in vim, you can split each <em>view</em>, or <em>rectangle</em>, <em>vertically or horizontally</em>. You can navigate between these views <em>vertically or horizontally</em>. You can also shrink or expand each view <em>vertically or horizontally</em>. More importantly, when you perform these actions, other views aren&rsquo;t affected in major ways, and that&rsquo;s a really nice advantage which many people might overlook - a serious drawback of dynamic tiling (which XMonad is based on) is that each new window can disrupt the positions and sizes of existing windows, and that can be very frustrating for the person sitting before the screen trying to remember all of them - <em>YOU</em>.</li>
</ol>


<p>In light of these observation and thoughts, an obvious conclusion is that we should use a layout that allows the same sort of power, as well as the flexibility, afforded by the similar in vim. The problem is that there isn&rsquo;t such a layout available. If you think carefully about this, you&rsquo;d realize that this wouldn&rsquo;t be an easy one-time pull-off even for those Haskell gurus.</p>

<h2>Problem-solving</h2>

<p><em>What should we do then?</em></p>

<p>Luckily, during my mulling over this, I turned to <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Layout-Groups.html">XMonad.Layout.Groups</a> and <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Layout-Groups-Examples.html">XMonad.Layout.Groups.Examples</a> again. The <strong>Rows of columns</strong>, or as it is called in the examples, seems to be the exact answer to my need. Essentially a combination of <strong>ZoomRows</strong>, it allows one to divide a workspace into multiple columns, which each then holds several rows. The size of each <em>rectangle</em> within can be adjusted in both dimensions. However, by using this layout we have to forgo <strong>Tabbed</strong> for each rectangle - the <strong>Rows of columns</strong> is already taking advantage of the <strong>Groups</strong> combinator and we have no way to insert another level of group nesting below it.</p>

<p><em>Or do we?</em></p>

<p>As I played around with the <strong>Groups</strong> source code, it turns out that further nesting of groups is indeed possible, with only minor tweaks and limitations. Simply open the source file for <code>XMonad.Layout.Groups</code> and add this function</p>

<pre><code class="haskell">group3 l l2 l3 = Groups g l3 start (U 2 0)
    where g = group l l2
          start = fromJust $ singletonZ $ G (ID (U 2 1) g) emptyZ
</code></pre>

<p>Then in your <code>xmonad.hs</code> you can use a <em>3-dimensional layout</em> like this</p>

<pre><code class="haskell">rectTabs = G.group3 (addTabs shrinkText myTabsTheme Simplest) (Mirror (zoomRowWith GroupEQ) ||| Full) (zoomRowWith GroupEQ ||| Full)
</code></pre>

<p>An additional benefit with using a combinator like <strong>Groups</strong> is that you can switch between different layouts for each level of nesting, as you can see from my code above, which allows me to switch between rows/columns and <strong>Full</strong> layout.</p>

<p>In more practical terms, this allows us to</p>

<ul>
<li>group windows into work contexts at the <em>workspace</em> level e.g. <code>xmonad</code>, <code>school project</code>, etc.</li>
<li><p>group windows in each work context into functional sub-groups in the form of columns e.g. inside <code>xmonad</code>, you can have a column devoted to <code>research</code> (many browser and document windows) and another one devoted to <code>code</code> (vim windows)</p>

<p>  Note how similar this concept is to the <code>taskGroup</code> concept that I spent a lot of words explaining in my previous blog. Later in this blog you&rsquo;ll see how I combine these two concepts together and make <em>window sorting</em> possible.</p>

<p>  <em>Also, just a slight digression:</em> I saw a lot of tutorials or videos online teaching people how to put all browser windows into one workspace and all text-editors into another - in my opinion such approaches miss the entire point of window tiling: if you can&rsquo;t compare an editor and a browser window side by side then there&rsquo;s no difference from just using tabbed editor and tabbed browser in a normal window manager - if you don&rsquo;t <em>need to</em> compare two windows, why bother <em>tiling them</em> in the first place? In that case a tabbed layout would be the most efficient one that makes full use of all screen estate.</p>

<p>  My previous setup - that is, <strong>Tabbed</strong> groups embedded in a <strong>Tall</strong> layout - does not allow much functional separation among windows, assuming I&rsquo;m using a topical assortment of workspaces. This problem is now fully solved: the column dimension, as I explained at the beginning of this bullet point, serves to separate windows by functions. If I switch the layout at the column level to <strong>Full</strong>, then I essentially have <code>research</code> and <code>code</code> workspaces inside a bigger workspace called <code>xmonad</code> (if you&rsquo;d like to visualize it in that way), and I can switch back to columns and compare these functional groups if I need to.</p></li>
<li>group windows in each functional group, or column, into rows (visually, it&rsquo;s probably more straightforward to call them rectangles or cells) e.g. inside the column <code>code</code>, you can have a <code>editor</code> rectangle holding vim instances and another <code>debugger</code> rectangle positioned below it holding xterms</li>
<li>lastly for windows that do not need to be compared against each other, group them into tabs and fit them into each rectangle e.g. in the <code>debugger</code> rectangle you can have <code>xterm 1</code>, <code>xterm 2</code>, etc.</li>
</ul>


<p>This is getting a little confusing, so we&rsquo;d better hurry to the next section which explains how to output these complicated group nestings into human-readable forms.</p>

<h2>Piecing it together</h2>

<p>Here&rsquo;s what my dzen <em>log bar</em> typically looks like</p>

<p style="text-align:center;"><img src="/images/xmonad/logbar.png" alt="" /></p>

<p>Some of the terms might require explanation:</p>

<ul>
<li>columnLayout: the layout used by the outermost group, or the columns in a workspace</li>
<li>rectLayout: the layout used by the intermediate group (the one below columns but above the tabs)</li>
<li>auto sort: <code>M</code> means <em>manual</em> while <code>A</code> means <em>auto</em>; will be explained in <a href="#auto_sort">a later section</a></li>
<li>history: just like the history indicator in vim; <code>+</code> and <code>-</code> mean there are <em>newer</em> and <em>older</em> windows to navigate to respectively; refer to <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#window_history">window history</a> if you are curious about how this is implemented</li>
<li>ref key: the highlighted letter is the <code>filterKey</code> of the respective <code>taskGroup</code> (refer to <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">task group</a> if you don&rsquo;t understand), which reminds me what filter key to press to perform actions on that group</li>
</ul>


<p>The main part relevant to our 3-dimensional layout is the part labelled <code>columns</code> and <code>rows</code> - each column is also referenced by a number (just like workspaces); and each row is contained in a pair of square brackets for clarity.</p>

<p>It took me quite a while to hack the original <strong>Groups</strong> layout to enable proper logging of the full window structure. Those interested can scroll down to the bottom and go to my github link directly to see the source.</p>

<p>Of course, a 3-dimensional layout would be less interesting if you don&rsquo;t have a full set of operations to perform on it. Here I&rsquo;ll just list a few operations that I normally use</p>

<ul>
<li><code>M-{k,j,h,l}</code>: navigate up/down/left/right to the rectangle on the corresponding direction</li>
<li><code>M-{p,n}</code>: navigate to previous/next tab</li>
<li><code>M-S-{p,n}</code>: swap the current tab with the previous/next tab</li>
<li><code>M-C-{h,l}</code>: split a window out to the left/right to form a new column</li>
<li><code>M-C-{k,j}</code>: split a window out to the up/down to form a new row/rectangle within the current column</li>
<li><code>M-S-{k,j,h,l}</code>: move a window up/down/left/right to the rectangle on the corresponding direction</li>
<li><code>M1-&lt;num&gt;</code>: go to the <code>num</code>&lsquo;th tab within the current rectangle</li>
<li><code>M1-S-&lt;num&gt;</code>: swap the current tab with the <code>num</code>&lsquo;th tab</li>
<li><code>C-&lt;num&gt;</code>: go to the <code>num</code>&lsquo;th column</li>
<li><code>C-S-&lt;num&gt;</code>: move the current window to the <code>num</code>&lsquo;th column</li>
<li><code>M-S-q</code>: close all tabs in the current rectangle</li>
<li><code>M-C-q</code>: close all windows in the current column</li>
<li><code>M-C-S-{k,j}</code>: swap the current rectangle up/down</li>
<li><code>M-C-S-{h,l}</code>: swap the current column left/right</li>
<li><code>M-{-,+}</code>: shrink/expand current rectangle vertically</li>
<li><code>M-{&lt;,&gt;}</code>: shrink/expand current rectangle horizontally</li>
<li><code>M-{=,\}</code>: reset the focus</li>
</ul>


<p>There are <em>many, many</em> more. In fact, since there are three levels of nesting within a single workspace, there is such an abundance of operations to invent that I eventually ran out of keyboard shortcuts to assign.</p>

<h1>Window Sorting</h1>

<p>Like I mentioned in the last section, the new dimension - <code>column</code> - allows me to group windows by their functions inside each workspace; and since I&rsquo;ve already defined many task groups in my config file, why not combine the two together? The results are what I call <em>Window Sorting</em> and <em>Auto Window Sorting</em>.</p>

<p><em>Note: you&rsquo;d need to first understand <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">task group</a> before you can possibly understand what I&rsquo;m doing here</em></p>

<h2>Manual Window Sorting</h2>

<p>I&rsquo;ve assigned <code>M-s</code> for this useful function. As soon as I press down this key combination, my XMonad loops through all the windows inside the current workspace and put them into columns, according to my task group definition. For example, if I have two <code>vimb</code> windows, one <code>vim</code> window and another <code>zathura</code> window all jumbled together in a single rectangle inside a workspace, pressing <code>M-s</code> gives me back three columns - one holding the two <code>vimb</code> windows, another holding the <code>vim</code>, and the last one holding the <code>zathura</code>. My function also tries to be as smart as possible: it will keep the focus on the same window after sorting; and it also tries to maintain the position of the current rectangle in the final assortment.</p>

<p>On the implementation side, I don&rsquo;t feel there&rsquo;s too much <em>magic</em> to talk about. Sorting is just like filtering, which also makes use of <code>Query Bool</code>s. If you are familiar with them then that&rsquo;s good - you can do a hell lot of stuff with these predicate functions.</p>

<h2><a id="auto_sort"></a>Automatic Window Sorting</h2>

<p>This is more interesting as what I&rsquo;m trying to achieve is essentially <code>Manage Hook</code> within <em>workspace</em>. Each workspace starts off in the <em>manual</em> mode, as indicated by the <code>M</code> in the sample image of my dzen bar. But if I press down <code>M-S-s</code>, <em>automatic</em> mode is turned on and the <code>M</code> changes to <code>A</code>. In the <em>automatic</em> mode, each new window is inserted into the column which has the highest percentage of windows of the same task group; if such column is not found, a new column is created before the current column for that new window to fit in. An example will better illustrate the use case:</p>

<ol>
<li>imagine you are in a workspace and you&rsquo;ve spawned a <code>vim</code> window to write some code in</li>
<li>now you want to search for something, so you press <code>M-[ b</code> - this triggers the <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">cycling protocol</a> of the <code>vimb</code> task group, and since there are no <code>vimb</code> windows to cycle about, the construction function of the group is invoked and a new <code>vimb</code> window is created</li>
<li>since this is the first <code>vimb</code> window and there are no columns found in the workspace to contain a window with the matching task group, the <code>vimb</code> window is put into a new column and the focus automatically transfers to it</li>
<li>all subsequent new <code>vimb</code> windows shall be inserted in that new column just created, given that you don&rsquo;t do any manual arrangement</li>
</ol>


<p>As you can see, this automates some common sorting tasks while at the same time preserves the manual arrangement made so far by the user. I found this useful especially for simple work contexts (workspaces) containing less than 10 windows.</p>

<h1>Shelf</h1>

<p>Although we can now manage windows with <em>3 dimensions</em>, maximise a column or even maximise a rectangle, sometimes we still wish that a window can be stashed somewhere temporarily. In my previous post I talked about how we can use <a href="http://lynnard.tk/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#scratchpad">perworkspace scratchpad</a> to achieve this aim, but what I realized later is that it still has some major limitation, the biggest of which is that all the scratchpads have to be pre-defined in the config file.</p>

<p>The alternative is to use <a href="http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Layout-Minimize.html">XMonad.Layout.Minimize</a>. This allows any window in a workspace to be toggled, but it also has problems:</p>

<ol>
<li>the user cannot see directly how many and which windows are currently minimized</li>
<li>the user can only un-minimize windows one by one using the un-minimize shortcut</li>
</ol>


<p>Fortunately they are both easy to solve:</p>

<ol>
<li>using hacks similar to what I&rsquo;ve done to <strong>Groups</strong> for group structure displaying, we can show the minimized windows on our bar, just as in my sample image</li>
<li>since I&rsquo;ve already invented many ways to navigate to a particular window (by <em>filterKey cycling</em>, by <em>history</em>, by <em>title prefix</em>, etc.) we can easily retrieve a minimized window by one of these means</li>
</ol>


<h1>What&rsquo;s more?</h1>

<p>This is by no means the end of all possible things one can do with XMonad. In particular, I haven&rsquo;t played around with <code>UrgencyHook</code>s and a couple of other seemingly useful modules. The more I customize XMonad, the more I begin to appreciate how powerful and flexible it is. For those interested in the customizations I&rsquo;ve talked about in my blogs, I&rsquo;ve managed to put all of them into a single repo. <a href="https://github.com/lynnard/xmonad">Here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Vim play nice with your Window Manager]]></title>
    <link href="http://lynnard.tk/blog/2013/11/15/making-vim-play-nice-with-your-window-manager/"/>
    <updated>2013-11-15T23:41:00+00:00</updated>
    <id>http://lynnard.tk/blog/2013/11/15/making-vim-play-nice-with-your-window-manager</id>
    <content type="html"><![CDATA[<h1>Motivation</h1>

<p>For people who&rsquo;ve used Vim extensively and exclusively, you&rsquo;ve probably seen this dreaded message a dozen of times</p>

<p style="text-align:center;"><img src="/images/vim/swap_warning.png" alt="" /></p>

<p>For most cases this glaring warning is there just because you&rsquo;ve forgotten having opened the same file in another Vim instance - and it happens for me a lot. Therefore for a long time I&rsquo;ve been thinking of an extension to Vim that:</p>

<ol>
<li>whenever a file with an existing swap is asked to be opened, instead of showing the message, jump to that editing session of Vim and switch to the file in question</li>
<li>when a file is asked to be opened check whether there is already some Vim instance lying around in the current workspace; if yes, then forward that request to the existing instance</li>
</ol>


<h1>Collecting the pieces</h1>

<p>One can argue that such features should come shipped with any modern editor - but well, this is our good old Vim running in terminals, so we probably shouldn&rsquo;t complain too much. But the good news is, I&rsquo;ve finally come to a solution for this based on <a href="http://tomas.styblo.name/wmctrl/">wmctrl</a> (and I don&rsquo;t know why I didn&rsquo;t bump into this little gem before).</p>

<p>To start with, <a href="http://tomas.styblo.name/wmctrl/">wmctrl</a> is a little program that interacts with your window manager on the command line (yes that is possible). The most useful features include listing the workspaces, checking for window information, jumping to a specific window based on title or window ID.</p>

<p>The other piece of the puzzle is Vim&rsquo;s own server-client feature, which I&rsquo;ve somehow looked over in the past. It&rsquo;s actually very simple:</p>

<ul>
<li><p>To start a server-enabled Vim</p>

<pre><code>  vim --servername &lt;name&gt; ARG1 ARG2 ARG3
</code></pre></li>
<li><p>To send command to a server-enabled Vim</p>

<pre><code>  vim --servername &lt;name&gt; --remote FILE1 FILE2
</code></pre>

<p>  This will connect to the vim by the server name and make it edit the files given in the rest of the arguments.</p></li>
<li><p>To query information regarding the remote vim, you can use</p>

<pre><code>  vim --servername &lt;name&gt; --remote-expr {expr}
</code></pre>

<p>  This will connect to the vim server, evalute <code>{expr}</code> in it and print the result on stdout.</p></li>
</ul>


<p>Another interesting discovery of mine is that Vim actually includes a plugin called <code>editexisting.vim</code> for the default installation. This will be the script we build upon.</p>

<p>Taken from <code>editexisting.vim</code>:</p>

<blockquote><ol>
<li>On startup, if we were invoked with one file name argument and the file is not modified then try to find another Vim instance that is editing this file.  If there is one then bring it to the foreground and exit.</li>
<li>When a file is edited and a swap file exists for it, try finding that other Vim and bring it to the foreground.  Requires Vim 7, because it uses the SwapExists autocommand event.</li>
</ol>
</blockquote>

<p>Most of the script works fine, except the part which concerns itself with <em>bringing (the remote Vim session) to the foreground and exit</em>. From my testing it doesn&rsquo;t work with XMonad (and I guess it wouldn&rsquo;t work with other lightweight window managers as well under Linux). So our primary aim would be to fix this problem.</p>

<h1>Solution</h1>

<p>Since we&rsquo;ve had <code>wmctrl</code>, what we need to do is really</p>

<ol>
<li>get the process id of the remote vim that is editing the same file</li>
<li>get the process id of the window that actually holds that vim; this is achieved by repeatedly getting the parent pid and checking against the process ids given in <code>wmctrl -lp</code></li>
<li>from the table of <code>wmctrl -lp</code>, get the title for the window and use <code>wmctrl -a TITLE</code> to jump to the window</li>
</ol>


<p>This is best shown in code</p>

<p><figure class='code'><figcaption><span>sh (wtitle)</span> <a href='/downloads/code/wtitle'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this script aims to find the window id of a given process </span>
</span><span class='line'><span class="c"># it does this by repeatedly getting the (parent) process id until a match is found in the window list</span>
</span><span class='line'><span class="nv">output</span><span class="o">=</span><span class="s2">&quot;`wmctrl -lp`&quot;</span>
</span><span class='line'><span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;${1:-$$}&quot;</span>
</span><span class='line'><span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class='line'>    <span class="c">#echo &quot;pid is $pid&quot;</span>
</span><span class='line'>    <span class="nv">wid</span><span class="o">=</span><span class="s2">&quot;`awk &#39;$3==&#39;&quot;</span><span class="nv">$pid</span><span class="s2">&quot;&#39;{for(i=5; i&lt;NF; i++){printf &quot;</span>%s <span class="s2">&quot;, $i}; print $NF}&#39; &lt;&lt;&lt; &quot;</span><span class="nv">$output</span><span class="s2">&quot;`&quot;</span>
</span><span class='line'>    <span class="c">#echo &quot;wid found is $wid&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$wid&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;$wid&quot;</span>
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;`ps -o ppid= -p $pid`&quot;</span>
</span><span class='line'>        ! <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> <span class="o">==</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exit </span>1
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The above code will print the title of the window given a process id. To use it in the vimscript:</p>

<pre><code class="vim">let pid = remote_expr(servername, "getpid()")
" execute the wmctrl command
call system("wmctrl -a \"`wtitle " . pid . "`\"")
</code></pre>

<p>Now the second task I mentioned is to forward all file opening requests to the same vim instance within the workspace. This is a little more complicated than the previous task, but there&rsquo;s nothing especially tricky</p>

<ol>
<li>get the list of vim servers by <code>vim --serverlist</code>; for each server get its pid</li>
<li>for each pid get its window title using the <code>wtitle</code> script shown above</li>
<li>check whether this window title corresponds to the same workspace as the current one</li>
<li>if yes, we&rsquo;ve obtained the vim instance in the current workspace</li>
<li>else if there&rsquo;s no vim instance in the current workspace, we should then start a new server-enabled vim</li>
</ol>


<p>All this can be wrapped up in this tiny script</p>

<p><figure class='code'><figcaption><span>sh (xvim)</span> <a href='/downloads/code/xvim'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">dname</span><span class="o">=</span><span class="s2">&quot;`wmctrl -d | awk &#39;$2==&quot;</span>*<span class="s2">&quot;{print $1}&#39;`&quot;</span>
</span><span class='line'><span class="c"># get the pid of all available vim instances</span>
</span><span class='line'><span class="nv">output</span><span class="o">=</span><span class="s2">&quot;`wmctrl -lp`&quot;</span>
</span><span class='line'>vim --serverlist | <span class="o">(</span><span class="k">while </span><span class="nb">read </span>line; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;`vim --servername &quot;</span><span class="nv">$line</span><span class="s2">&quot; --remote-expr &#39;getpid()&#39;`&quot;</span>
</span><span class='line'>    <span class="c"># try to get the pid that works</span>
</span><span class='line'>    <span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nv">wtitle</span><span class="o">=</span><span class="s2">&quot;`awk &#39;$3==&#39;&quot;</span><span class="nv">$pid</span><span class="s2">&quot;&#39;{</span>
</span><span class='line'><span class="s2">            if ($2==&quot;</span><span class="s1">&#39;&quot;$dname&quot;&#39;</span><span class="s2">&quot;) {</span>
</span><span class='line'><span class="s2">                for(i=5; i&lt;NF; i++)</span>
</span><span class='line'><span class="s2">                    printf &quot;</span>%s <span class="s2">&quot;, $i </span>
</span><span class='line'><span class="s2">                print $NF</span>
</span><span class='line'><span class="s2">            } else</span>
</span><span class='line'><span class="s2">                exit 1</span>
</span><span class='line'><span class="s2">        }&#39; &lt;&lt;&lt; &quot;</span><span class="nv">$output</span><span class="s2">&quot;`&quot;</span>
</span><span class='line'>        <span class="c">#echo &quot;wid found is $wid&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> <span class="o">==</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">            if</span> <span class="o">[</span> -n <span class="s2">&quot;$wtitle&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>                <span class="c"># we should try to navigate to this window and ask the window to open the required files</span>
</span><span class='line'>                wmctrl -a <span class="s2">&quot;$wtitle&quot;</span>
</span><span class='line'>                vim --servername <span class="s2">&quot;$line&quot;</span> --remote <span class="s2">&quot;$@&quot;</span>
</span><span class='line'>                <span class="nb">exit</span>
</span><span class='line'><span class="nb">            </span><span class="k">else</span>
</span><span class='line'><span class="k">                </span><span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;`ps -o ppid= -p $pid`&quot;</span>
</span><span class='line'>                ! <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> <span class="o">==</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">break</span>
</span><span class='line'><span class="nb">            </span><span class="k">fi</span>
</span><span class='line'><span class="k">        else</span>
</span><span class='line'><span class="k">            </span><span class="nb">break</span>
</span><span class='line'><span class="nb">        </span><span class="k">fi</span>
</span><span class='line'><span class="k">    done</span>
</span><span class='line'><span class="k">    </span>srvnames+<span class="o">=(</span><span class="s2">&quot;:$line:&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c">#echo &quot;all servernames found: ${srvnames[@]}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">c</span><span class="o">=</span>0
</span><span class='line'><span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">srvname</span><span class="o">=</span><span class="s2">&quot;VIM @$dname.$c&quot;</span>
</span><span class='line'>    ! <span class="o">[[</span> <span class="s2">&quot;${srvnames[@]}&quot;</span> <span class="o">=</span> *:<span class="s2">&quot;$srvname&quot;</span>:* <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="nv">c</span><span class="o">=</span><span class="k">$((</span>c+1<span class="k">))</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start a new vim instance with a unique servername</span>
</span><span class='line'>xterm -name vim -e loader vim --servername <span class="s2">&quot;$srvname&quot;</span> <span class="s2">&quot;$@&quot;</span> &amp;<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
