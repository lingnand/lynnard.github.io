<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | .hack/lynnard]]></title>
  <link href="http://lynnard.me/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://lynnard.me/"/>
  <updated>2015-07-19T10:30:08+01:00</updated>
  <id>http://lynnard.me/</id>
  <author>
    <name><![CDATA[Lynnard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing the missing drafting and queueing function in Octopress]]></title>
    <link href="http://lynnard.me/blog/2013/11/03/implementing-the-missing-drafting-and-queueing-function-in-octopress/"/>
    <updated>2013-11-03T00:37:00+00:00</updated>
    <id>http://lynnard.me/blog/2013/11/03/implementing-the-missing-drafting-and-queueing-function-in-octopress</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I first started using Octopress. Its simple and elegant way of writing has now become my <em>de facto</em> standard of writing, but there are still things to be desired. For one thing, the workflow consisting of <em>writing, commiting, compiling and deploying</em> is still not <em>lazy</em> enough; ideally the only thing that should be required of the writer is <em>to write</em>. Inspired by Dennis Wegner in his <a href="http://instant-thinking.de/2012/08/03/synced-and-scheduled-blogging-with-octopress/">Synced and scheduled blogging with Octopress</a>, I worked on a bash script to allow for friction-free, painless deployment process that goes totally automatic underhood.</p>

<h3>A short summary of the tinkering</h3>

<ol>
<li>Like in Dennis&#8217;es original post, two new folders called <code>_drafts</code> and <code>_queue</code> are added to the <code>source</code> directory to hold drafts and queued posts respectively.</li>
<li><p>Again, just like in the original post, you can put any markdown files within the <code>_drafts</code> folder; as soon as there&rsquo;s the <code>published: true</code> property within the YAML front matters like this</p>

<pre><code> ---
 published: true
 ---
</code></pre>

<p> Then the draft will be moved to the <code>_queue</code> folder</p></li>
<li>All the files within the <code>_queue</code> folder will be checked for its <code>date</code> property in the YAML front matters; if it&rsquo;s before the current time, then the file will be moved to the <code>_posts</code> folder for publishing</li>
</ol>


<h3>So what&rsquo;s added / improved?</h3>

<ol>
<li>The script automatically checks for the validity of the YAML front matters during each move of any post; among other things, it will add the following properties if absent:

<ul>
<li>date: the last modified date of the file is used; this is useful if you don&rsquo;t want to take the creation date for the draft as the date published on your website (which is the weird default behavior of Octopress) &ndash; in that case just leave this field blank and it will be added automatically when the draft gets moved to the queue (or when you put a file yourself into the queue)</li>
<li>layout: <code>post</code> is assumed as the default layout, which should be sensible enough</li>
<li>title: the file name of the post (subtracting the date prefix, if any) is used</li>
</ul>


<p> What all these mean is that the minimal setup you&rsquo;d need to have for a post is</p>

<p> <strong>Either</strong></p>

<ol type="a">
<li>touch a new file in <code>_drafts</code> with its file name as the title</li>
<li>when finished, add <code>published: true</code> to the top (don&rsquo;t forget the triple dashes)</li>
</ol>


<p> <strong>OR</strong></p>

<ol type="a">
<li>touch a new file anywhere with its file name as the title</li>
<li>when finished, move it to <code>_queue</code>; the file will then be published during the next update</li>
</ol>


<p> <em>The second approach eliminates the need to have the YAML front matters entirely</em></p></li>
<li><p>The script checks for <strong>all changes</strong> within the <code>octopress</code> directory using <code>git diff</code> and <code>git ls-files</code>. This means compared to the approach in the <a href="http://instant-thinking.de/2012/08/03/synced-and-scheduled-blogging-with-octopress/">original post</a>, now the website will be rebuilt even when files like <code>_config.yaml</code> is changed</p>

<p> Note that this might not be optimal if you&rsquo;ve had <code>_queue</code> and <code>_drafts</code> tracked by git. In that case whenever a draft is changed or something gets moved into the queue then the source will be commited, changes pushed to the remote, website rebuilt and all. I myself have excluded these two directories from git because I don&rsquo;t like the idea of having my drafts posting up to the cloud (I&rsquo;m using GitHub as my host and I&rsquo;m <em>a little</em> against having my unpolished thoughts shown in public) and I&rsquo;ve had Dropbox versioning control these posts in the first place.</p>

<p> However, if you&rsquo;re pointing your source to a private remote, then it might be a good idea for versioning control your drafts. In that case I&rsquo;d recommend you change the script to auto-commit the changes in <code>_drafts</code> and <code>_queue</code> but exclude website re-compiling in such cases by greping the output of <code>git diff</code> and <code>git ls-files</code> to see if all changes happen in these directories.</p></li>
</ol>


<h3>Where to download?</h3>

<p>You can download the whole source file <a href="downloads/code/octopress">here</a>. Below shows a preview of the code:</p>

<pre><code>case $1 in
    rake) 
        cd "$OCTOPRESS_HOME"
        rake "${@:2}"
        ;;
    update)
        # first move the files in the draft to queue if the draft property is set to true
        echo "######## Checking for finished drafts ########"
        # try to find all the markdown and md files
        find "$OCTOPRESS_DRAFTS_DIR" -type f \( -name '*.markdown' -o -name '*.md' \) | while read draft
        do
            # get the published property; if no published property is found then default to false
            if [ "`valueForProperty "$(YAMLFrontMatterOfPost "$draft" false)" 'published'`" = 'true' ]; then
                new_post_name="`fullNameOfPost "$draft"`"
                echo "$draft: Published is true, moving to queue folder (renaming to $new_post_name)..."
                mv -n "$draft" "$OCTOPRESS_QUEUE_DIR/$new_post_name"
            fi
        done
        # second move the files in the queue to the post directory if the date specified is in the past
        echo "######## Checking for publishable posts in the queue ########"
        find  "$OCTOPRESS_QUEUE_DIR" -type f \( -name '*.markdown' -o -name '*.md' \) | while read post
        do
            currDate="`date '+%s'`"

            # get the post name to ensure that date etc are properly initiated
            new_post_name="`fullNameOfPost "$post"`"
            dateString="`valueForProperty "$(YAMLFrontMatterOfPost "$post")" 'date'`"
            dateString="${dateString% *}"

            postDate="`date -d "$dateString" '+%s'`"

            if ((postDate &lt; currDate)); then
                echo "$post: Post date is in the past, moving to post folder (renaming to $new_post_name)..."
                mv -n "$post" "$OCTOPRESS_POSTS_DIR/$new_post_name"
            fi
        done

        echo "######## Checking for changes in the source directory ########"
        cd "$OCTOPRESS_HOME"
        to_update=false
        # first check if there is any change in the source branch; if there's then commit and update
        # diff --quiet checks whether there's change in the tracked files; the second command checks whether there's untracked file
        # the draft and queue folders are UNTRACKED; so you can basically do anything you want for the drafts 
        if ! git --no-pager diff --exit-code || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            echo "Changes to the octopress directory detected."
            to_update=true
        elif ! [ -e "$OCTOPRESS_STATUS_FILE" ]; then
            echo "No last update status found." 
            to_update=true
        elif [ "`cat "$OCTOPRESS_STATUS_FILE"`" = 1 ]; then
            echo "Last update failed."
            to_update=true
        fi

        echo "######## Beginning update ########"
        if $to_update; then
            echo "Commiting changes in the source branch..." 
            # the add commit phase don't really count towards update result as it can give back error code if there's nothing to commit
            git add -A 
            git commit -m "Source updated" 
            echo "Pushing changes to remote..." \
            &amp;&amp; git push origin source \
            &amp;&amp; echo "Generating and deploying the website..." \
            &amp;&amp; rake gen_deploy \
            &amp;&amp; echo 0 &gt; "$OCTOPRESS_STATUS_FILE" \
            || echo 1 &gt; "$OCTOPRESS_STATUS_FILE"
        else
            echo "Nothing to update."
        fi
        ;;
    *)
        usage
        ;;
esac
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lynnard's very first nerdy rant about blogging]]></title>
    <link href="http://lynnard.me/blog/2013/07/30/the-very-first-blog-post/"/>
    <updated>2013-07-30T12:08:00+01:00</updated>
    <id>http://lynnard.me/blog/2013/07/30/the-very-first-blog-post</id>
    <content type="html"><![CDATA[<p>Finally opened my own blogspace. I&rsquo;ve been dreaming about this day for a <em>long, long</em> time but never got time to set it up properly. For one thing, the <em>common</em> blogging scene is so crowded with web-interface-backed alternatives such as Wordpress - which at best is cumbersome and not <em>hacker-minded</em>. An easy dig around the net reveals to me the gem in the sea: <strong>Octopress</strong>.</p>

<h2>What is Octopress?</h2>

<ul>
<li>Write your blogs in <code>Markdown</code> with <em>any</em> editor (Sweet, <code>vim</code> it is)</li>
<li>Include code like skateboarding in the sky</li>
</ul>


<pre><code>$ rake new_post["I like to write blog in CLI"]
$ rake preview
</code></pre>

<ul>
<li>Version control your blog like any code in Github</li>
</ul>


<h2>Gotcha</h2>

<pre><code>As a `Pandoc` loyalist, Octopress's choice of using `rdiscount` as its default `Markdown` compiler without a doubt unnerves me. Therefore the first thing to do is to integrate Pandoc into Octopress. Fortunately a little [post](http://drz.ac/2013/01/03/blogging-with-math/) helped me.
</code></pre>

<p>Unfortunately the Pandoc solution is <strong>NOT</strong> working for me. For the time being I&rsquo;ll be settling with Octopress&rsquo;s own codeblock feature or its github code fencing filter.</p>

<h2>Gonna be different?</h2>

<p>One biggest problem with Octopress is its poor support for themes (or rather, the dearth of the themes?), which leads to the fact that <strong>almost every Octopress blog looks exactly the same</strong>. To be fair the default theme looks perfectly fine to my eyes; but after seeing it being used with only changes in background wallpaper across <em>countless</em> other blogs it&rsquo;s out of luck for me. A purist needs something simple, functional, and yet <em>a little</em> different. That&rsquo;s why I decided to settle on <a href="http://zespia.tw/Octopress-Theme-Slash/index.html">slash</a>. In future I might tweak the theme myself to suit my needs but all is good for now.</p>

<h2>What about working on the go?</h2>

<p>This, however, is a big problem. The un*xy set of utilities sported by Octopress on CLI affords great flexibility and extensibility when working on a computer, but when you are left with only an iPhone or an Android then all becomes a giant <strong>PITA</strong>. I do wonder from time to time why no phone manufacturer has ever introduced a phone with a proper Terminal interface - which would definitely thrill up a huge crowd of nerds - but apparently nerds (read 屌丝) are just out of consideration for any manager.</p>

<p>I&rsquo;m to have a Blackberry Q10 in October so ideally there can be some solution for this great phone with its great QWERTY keyboard. One thing I can think of is to have a server running 24hr that monitors my Dropbox directory and recompiles my website whenever a change is made; at the same time use some text editor to edit the posts on my phone; or better yet, just use a SSH client and &hellip;</p>

<p><em>Oh forget about it.</em></p>
]]></content>
  </entry>
  
</feed>
