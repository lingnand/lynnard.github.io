<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: en | .hack/lynnard]]></title>
  <link href="http://lynnard.me/blog/categories/en/atom.xml" rel="self"/>
  <link href="http://lynnard.me/"/>
  <updated>2015-07-14T01:28:12+01:00</updated>
  <id>http://lynnard.me/</id>
  <author>
    <name><![CDATA[Lynnard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coming back]]></title>
    <link href="http://lynnard.me/blog/2014/10/31/coming-back/"/>
    <updated>2014-10-31T19:48:00+00:00</updated>
    <id>http://lynnard.me/blog/2014/10/31/coming-back</id>
    <content type="html"><![CDATA[<p>Haven&rsquo;t updated my website for ages.</p>

<p><em>A lot has happened</em> - graduated from university, got a job, found a home in one of the busiest cities in the world, laptop broken, laptop fixed, laptop broken again, laptop fixed again.</p>

<p>Fortunately I&rsquo;m having more and more time to do things I like - by that I mean developing programs, as a developer - and paid for that as well.</p>

<p>The hustle-bustle meant most of my projects, just-starting or on-going, had to be put on shelf. Now over two months later I can barely recognize any of them under the thick dust that&rsquo;s been covering up.</p>

<p>Well, nothing is too late - or at least I hope so. I&rsquo;ve been itching to give my newborn freedom a try and any of these projects seems to be a perfect starting point. So stay tuned and expect great things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIMonad- transforming XMonad to Vim with Motion Keys, Register, Visual Mode, Macros, ...]]></title>
    <link href="http://lynnard.me/blog/2014/06/11/vimonad/"/>
    <updated>2014-06-11T16:19:00+01:00</updated>
    <id>http://lynnard.me/blog/2014/06/11/vimonad</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally got the time to clean up my XMonad configurations, split them into modules, and formally made a fork at <a href="http://vimonad.lynnard.me">VIMonad</a>.</p>

<p>You can find all the description and documentation on its project page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More prompt stuff: reverse completion, colored prompt, dynamic prompt/preview widget]]></title>
    <link href="http://lynnard.me/blog/2014/02/24/more-prompt-stuff/"/>
    <updated>2014-02-24T17:00:00+00:00</updated>
    <id>http://lynnard.me/blog/2014/02/24/more-prompt-stuff</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since I last wrote something on XMonad. It&rsquo;s not that I don&rsquo;t have anything to share in the last couple of weeks, but rather, I felt it a little bit troublesome to explain some of my most recent tweaks. But enough with my laziness, I finally decided to spend some quality time to write on these nifty new things.</p>

<h1>Reverse completion</h1>

<p>I&rsquo;ve always wondered why the default prompt does not support <code>Shift+Tab</code> to move the focus up the completion menu. So I basically added another branch in the main loop of the prompt system such that whenever a <code>Shift+Tab</code> is pressed it passes a <em>reversed</em> list of the completion items to the <code>completionFunction</code> - achieving what I want in most cases.</p>

<h1>Colored prompt</h1>

<p>Ever thought about having a colorful prompt system within XMonad? Now it is possible. I first got this idea when I was working on the taskwarrior prompt system - the taskwarrior program supports outputting ANSI colors, but apparently the stock XMonad.Prompt wouldn&rsquo;t do anything for that extra information.</p>

<p>The functions behind these color renderings aren&rsquo;t terribly complicated - it just looks for terminal color sequences and transform them into hex color codes that can be printed easily using standard X library.</p>

<p style="text-align:center;"><img src="/images/xmonad/colored_prompt.png" alt="" /></p>

<p>However, here&rsquo;s the catch: if you are going with the color, make sure you know something about color encoding and have the time and effort to tweak it to make it look nice. Unfortunately I have neither of those and that&rsquo;s why I ended up not using any color after all.</p>

<h1>More on Dynamic Prompt</h1>

<p>The concept of dynamic prompt was first introduced in one of my earlier <a href="/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position/">post</a>.</p>

<p>One major gripe I&rsquo;ve always had regarding standard unix tools is that it&rsquo;s not that straightforward to perform certain tasks chained together in a visual and direct way.</p>

<p>For example, say you want to remove a file. You know it&rsquo;s located in a folder with <code>Prompt</code> in its name. You also know that the file has the keyword <code>shell</code> inside.</p>

<p>What you&rsquo;d normally do is probably like this:</p>

<h3>Step 1</h3>

<pre><code>$ pwd
/home/lingnan/DB/indie/XMonad
$ find * -name '*Prompt*'
XMonadContrib/dist/build/XMonad/Prompt
XMonadContrib/XMonad/Prompt
</code></pre>

<p>Now you remember that the folder you are looking for is <code>XMonadContrib/XMonad/Prompt</code>.</p>

<h3>Step 2</h3>

<pre><code>$ grep -R 'shell' XMonadContrib/XMonad/Prompt
XMonadContrib/XMonad/Prompt/Shell.hs:A shell prompt for XMonad
XMonadContrib/XMonad/Prompt/Shell.hs:    , shellPrompt
</code></pre>

<p>Now you&rsquo;ve found the file! It&rsquo;s <code>XMonadContrib/XMonad/Prompt/Shell.hs</code>.</p>

<h3>Step 3</h3>

<pre><code>$ rm XMonadContrib/XMonad/Prompt/Shell.hs
</code></pre>

<p>It&rsquo;s not terribly complicated, but it&rsquo;s certainly nowhere near convenient.</p>

<p>That&rsquo;s where my <strong>dynamic prompt widget</strong> comes in. Basically each of these widgets defines a <em>keyword</em> and as long as one such keyword is detected on the prompt line, anything after that <em>keyword</em> is passed to the relevant widget, which will then display the appropriate autocompletions for the user to complete against.</p>

<h2>Search Widget</h2>

<p>Currently there are 8 search widgets</p>

<ul>
<li><code>f</code>: search for recent files using <code>fasd</code></li>
<li><code>a</code>: search for recent files or directories using <code>fasd</code></li>
<li><code>d</code>: search for recent directories using <code>fasd</code></li>
<li><code>z</code>: search for recent directoties using <code>fasd</code>; on completion substitute the prompt line command such that it&rsquo;s suitable for changing directory from the prompt</li>
<li><code>l</code> (locate): search for files recursively in a given directory (or the current one, if not specified) using <code>find</code></li>
<li><code>t</code> (tag): search for a directory in my tag database using <code>find</code></li>
<li><code>g</code> (grep): list all files containing the given words</li>
<li><code>gp</code> (pdfgrep): list all pdf files containing the given words</li>
</ul>


<p>So for the same problem we discussed before, it can be done with my dynamic prompt system in the following way:</p>

<h3>Step 1</h3>

<p>Invoke the prompt. Since you want to remove a file, just type in <code>rm</code>.</p>

<h3>Step 2</h3>

<p>Now you realize that you don&rsquo;t know the exact location of the file. You remember that the file contains the word <code>shell</code>. That means we should use <code>g</code> widget to grep for <code>shell</code>. So you type in another <code>g</code>. The prompt line is now <code>rm g</code>.</p>

<h3>Step 3</h3>

<p>You want to narrow down to a directory having <code>Prompt</code> in its name instead of greping blindly in the current directory which might contain 1000 files. That means we need to use <code>l</code> widget to locate that directory and pass it back to the <code>g</code> widget as its argument. So type in <code>l Prompt</code>. Now you&rsquo;ll get some screen like this:</p>

<p style="text-align:center;"><img src="/images/xmonad/widget1.png" alt="" /></p>

<p>Now press tab to autocomplete. The completion algorithm is smart enough to remove the preceding widget keyword automatically - <code>l</code> in this case.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget2.png" alt="" /></p>

<h3>Step 4</h3>

<p>Now you&rsquo;ve got the directory to grep in. Finish typing by adding the word to grep against.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget3.png" alt="" /></p>

<p>Like before, tab through to the right file to make the final prompt line look like this:</p>

<p style="text-align:center;"><img src="/images/xmonad/widget4.png" alt="" /></p>

<h3>Step 5</h3>

<p>Press <em>Return</em> to execute the command.</p>

<p>After this lengthy explanation, you might jump up and say: <em>gosh, that&rsquo;s complicated!</em> The fact that there seem to be more steps with my system than with the standard unix tools is because I&rsquo;m trying to explain all the details as clearly as possible. In practice my system is designed to be as close to your thinking process as possible - type the action you want to achieve directly, and when you want to get hold to some file as the argument to the action you are trying to complete, just use one of the widgets to help you out.</p>

<h3>Preview widget</h3>

<p>If you are familiar with <code>ranger</code>, you&rsquo;d know that it uses a preview script to render information about the file you are working on. The same works for my dyanmic prompt - if you&rsquo;ve given a file argument on the prompt, press another <code>Space</code> would trigger the previewing of that file argument.</p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_source.png" alt="previewing a source file" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_pdf.png" alt="previewing a pdf file" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_preview_zip.png" alt="previewing a zip file" /></p>

<h3>Other widgets</h3>

<p style="text-align:center;"><img src="/images/xmonad/widget_top.png" alt="top" /></p>

<p style="text-align:center;"><img src="/images/xmonad/widget_git.png" alt="git" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supercharge your XMonad! Colored Tabs, Dynamic Prompt, Window/Workspace Insert Position]]></title>
    <link href="http://lynnard.me/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position/"/>
    <updated>2014-01-06T17:57:00+00:00</updated>
    <id>http://lynnard.me/blog/2014/01/06/supercharge-your-xmonad-colored-tabs-dynamic-prompt-window-slash-workspace-insert-position</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s another post to show some of my latest hacks on XMonad.</p>

<h1>Colored Tabs</h1>

<p style="text-align:center;"><img src="/images/xmonad/color_tabs.png" alt="" /></p>

<p>One of the things that annoyed me for the Tabbed layout is that I couldn&rsquo;t make out which program is in which tab from the look of the tabs alone easily. Having a different theme for different <a href="http://lynnard.me/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">task groups</a> thus becomes a natural choice for me.</p>

<p>To apply this mod the key is to modify the <code>updateDeco</code> method in <code>XMonad.Layout.Decoration</code>.</p>

<p>A little thanks goes to <em>OODavo</em> from <em>#xmonad</em>.</p>

<h1>Dynamic Prompt</h1>

<p>The stock <code>XMonad.Prompt.Shell</code> is fine but I can&rsquo;t think of any other things it can do aside from launching programs.</p>

<p>My dynamic prompt, in contrast, serves to</p>

<ul>
<li>launch apps with shell completion (of course)</li>
<li>render output directly in the autocompletion window for <em>some</em> commands <em>e.g. man head</em></li>
<li>opens the file or directory on prompt directly using <a href="http://ranger.nongnu.org/">rifle</a></li>
</ul>


<p>Now I don&rsquo;t have to launch a ranger instance in each and every workspace anymore.</p>

<h1>Window/Workspace Insert Position</h1>

<p>This one is not totally necessary (I think), but I consider it useful at times.</p>

<h2>Window Insert Position</h2>

<p>Using <code>XMonad.Hooks.InsertPosition</code> you can easily decide whether the focus should stay with the old window or transfer to the new window when it is created; the module also claims to support changing the insert position of the new window but I haven&rsquo;t been able to make that work (probably it&rsquo;s a compatibility problem with my complicated custom layout). I&rsquo;ve further extended this module to allow dynamic toggling of the <em>focus-stay-with-old-or-new-window</em> feature (let&rsquo;s call it <em>window insert position</em> feature) via a keyboard shortcut.</p>

<p>Why would this be useful? Imagine you are using a browser application like <code>vimb</code>; it does not manage windows itself so new web pages opened by it will always take the focus in XMonad. Now with this mod you can decide that behavior. In fact I&rsquo;ve defined <code>g;t</code> in my <code>vimb</code> (the shortcut responsible for entering the hint mode and continue opening the activated links until the mode is quit via <code>Esc</code>) such that it automatically opens the tab in the background and when it finishes recovers the old <em>window insert position</em> configuration.</p>

<h2>Workspace Insert Position</h2>

<p>Continuing from my <a href="http://lynnard.me/blog/2013/11/05/building-a-vim-like-xmonad-prompt-task-groups-topical-workspaces-float-styles-and-more/#task_group">Dynamic Workspace</a>, the following keybinding are added:</p>

<ul>
<li><code>M-a {a,M-a}</code>: launches the workspace creation prompt and on completion insert the workspace <em>just after the current one</em></li>
<li><code>M-a {i,M-i}</code>: same as before but on completion insert the workspace <em>just before the current one</em></li>
<li><code>M-a {I,M-I}</code>: you&rsquo;ve guessed it; insert at the beginning</li>
<li><code>M-a {A,M-A}</code>: insert at the end</li>
</ul>


<p>There is another set of key bindings beginning with <code>M-S-a</code> which creates the new workspace in the same way but also at the same time move the current window to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change cursor shape for zsh vi-mode]]></title>
    <link href="http://lynnard.me/blog/2014/01/05/change-cursor-shape-for-zsh-vi-mode/"/>
    <updated>2014-01-05T18:36:00+00:00</updated>
    <id>http://lynnard.me/blog/2014/01/05/change-cursor-shape-for-zsh-vi-mode</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using zsh and its wonderful <em>vi-mode</em> line editing keybindings for a long time, but one thing that has always troubled me is the lack of visual clues to the current <em>mode</em>.</p>

<p>With <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> you can optionally have an indicator to the right of the prompt telling you this, but I feel it&rsquo;s not <em>native</em> enough - we need something simpler and more direct, just as in vim I&rsquo;ve set my cursor to be an underscore in the insert mode and a solid block in the command mode.</p>

<p>Luckily you can do just that with the powerful zsh shell.</p>

<p>First off the relevant escape sequences for changing the cursor shape are:</p>

<ul>
<li><code>"\e[4 q"</code>: solid underscore</li>
<li><code>"\e[2 q"</code>: solid block</li>
</ul>


<p>The hook called when your vi mode changes is <code>zle-keymap-select</code>. If you want comprehensiveness, also include <code>zle-line-init</code> and <code>zle-line-finish</code>.</p>

<p>Now just append this to the end of your <code>zshrc</code>.</p>

<pre><code class="sh">zle-keymap-select () {
    if [ "$TERM" = "xterm-256color" ]; then
        if [ $KEYMAP = vicmd ]; then
            # the command mode for vi
            echo -ne "\e[2 q"
        else
            # the insert mode for vi
            echo -ne "\e[4 q"
        fi
    fi
}
</code></pre>

<p><em>Boom</em>, you&rsquo;ve just configured your cursor to change shape on the fly according to your editing mode!</p>
]]></content>
  </entry>
  
</feed>
